//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Test Auth
     * @return Successful Response
     */
    test_auth_api_auth_test_get(): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/auth/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest_auth_api_auth_test_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest_auth_api_auth_test_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponse>;
        }));
    }

    protected processTest_auth_api_auth_test_get(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Login
     * @return Successful Response
     */
    login_api_auth_token_post(body: Body_login_api_auth_token_post): Observable<Token> {
        let url_ = this.baseUrl + "/api/auth/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = Object.keys(body as any).map((key) => {
            return encodeURIComponent(key) + '=' + encodeURIComponent((body as any)[key]);
        }).join('&')

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin_api_auth_token_post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin_api_auth_token_post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Token>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Token>;
        }));
    }

    protected processLogin_api_auth_token_post(response: HttpResponseBase): Observable<Token> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Token.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Read Users Me
     * @return Successful Response
     */
    read_users_me_api_auth_me_get(): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/auth/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRead_users_me_api_auth_me_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRead_users_me_api_auth_me_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse>;
        }));
    }

    protected processRead_users_me_api_auth_me_get(response: HttpResponseBase): Observable<UserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get User
     * @return Successful Response
     */
    get_user_api_users__email__get(email: string): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/users/{email}";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined.");
        url_ = url_.replace("{email}", encodeURIComponent("" + email));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_user_api_users__email__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_user_api_users__email__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse>;
        }));
    }

    protected processGet_user_api_users__email__get(response: HttpResponseBase): Observable<UserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create User
     * @return Successful Response
     */
    create_user_api_users__post(body: UserCreate): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/users/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_user_api_users__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_user_api_users__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse>;
        }));
    }

    protected processCreate_user_api_users__post(response: HttpResponseBase): Observable<UserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Current User Route
     * @return Successful Response
     */
    get_current_user_route_api_users_me_get(): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/users/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_current_user_route_api_users_me_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_current_user_route_api_users_me_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse>;
        }));
    }

    protected processGet_current_user_route_api_users_me_get(response: HttpResponseBase): Observable<UserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * List Users For Company
     * @return Successful Response
     */
    list_users_for_company_api_users_company__company_id__get(company_id: number): Observable<UserResponse[]> {
        let url_ = this.baseUrl + "/api/users/company/{company_id}";
        if (company_id === undefined || company_id === null)
            throw new Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList_users_for_company_api_users_company__company_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList_users_for_company_api_users_company__company_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse[]>;
        }));
    }

    protected processList_users_for_company_api_users_company__company_id__get(response: HttpResponseBase): Observable<UserResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Set Current Company
     * @return Successful Response
     */
    set_current_company_api_users_current_company__company_id__put(company_id: number): Observable<any> {
        let url_ = this.baseUrl + "/api/users/current-company/{company_id}";
        if (company_id === undefined || company_id === null)
            throw new Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSet_current_company_api_users_current_company__company_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSet_current_company_api_users_current_company__company_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processSet_current_company_api_users_current_company__company_id__put(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update User
     * @return Successful Response
     */
    update_user_api_users__user_id__put(user_id: number, body: UserUpdate): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/users/{user_id}";
        if (user_id === undefined || user_id === null)
            throw new Error("The parameter 'user_id' must be defined.");
        url_ = url_.replace("{user_id}", encodeURIComponent("" + user_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_user_api_users__user_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_user_api_users__user_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponse>;
        }));
    }

    protected processUpdate_user_api_users__user_id__put(response: HttpResponseBase): Observable<UserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Current Company
     * @return Successful Response
     */
    get_current_company_api_companies_current_get(): Observable<CompanyResponse> {
        let url_ = this.baseUrl + "/api/companies/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_current_company_api_companies_current_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_current_company_api_companies_current_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanyResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanyResponse>;
        }));
    }

    protected processGet_current_company_api_companies_current_get(response: HttpResponseBase): Observable<CompanyResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * List Companies
     * @return Successful Response
     */
    list_companies_api_companies__get(): Observable<CompanyResponse[]> {
        let url_ = this.baseUrl + "/api/companies/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList_companies_api_companies__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList_companies_api_companies__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanyResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanyResponse[]>;
        }));
    }

    protected processList_companies_api_companies__get(response: HttpResponseBase): Observable<CompanyResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompanyResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Company
     * @return Successful Response
     */
    create_company_api_companies__post(body: CompanyCreate): Observable<CompanyResponse> {
        let url_ = this.baseUrl + "/api/companies/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_company_api_companies__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_company_api_companies__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanyResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanyResponse>;
        }));
    }

    protected processCreate_company_api_companies__post(response: HttpResponseBase): Observable<CompanyResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * List User Companies
     * @return Successful Response
     */
    list_user_companies_api_companies_my_companies_get(): Observable<CompanyResponse[]> {
        let url_ = this.baseUrl + "/api/companies/my-companies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList_user_companies_api_companies_my_companies_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList_user_companies_api_companies_my_companies_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanyResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanyResponse[]>;
        }));
    }

    protected processList_user_companies_api_companies_my_companies_get(response: HttpResponseBase): Observable<CompanyResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompanyResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Company
     * @return Successful Response
     */
    update_company_api_companies__company_id__patch(company_id: number, body: CompanyUpdate): Observable<CompanyResponse> {
        let url_ = this.baseUrl + "/api/companies/{company_id}";
        if (company_id === undefined || company_id === null)
            throw new Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_company_api_companies__company_id__patch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_company_api_companies__company_id__patch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompanyResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompanyResponse>;
        }));
    }

    protected processUpdate_company_api_companies__company_id__patch(response: HttpResponseBase): Observable<CompanyResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Roles
     * @return Successful Response
     */
    get_roles_api_roles__get(): Observable<RoleListResponse> {
        let url_ = this.baseUrl + "/api/roles/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_roles_api_roles__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_roles_api_roles__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleListResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleListResponse>;
        }));
    }

    protected processGet_roles_api_roles__get(response: HttpResponseBase): Observable<RoleListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get User Roles
     * @return Successful Response
     */
    get_user_roles_api_roles_user__user_id__roles_get(user_id: number): Observable<UserRolesResponse> {
        let url_ = this.baseUrl + "/api/roles/user/{user_id}/roles";
        if (user_id === undefined || user_id === null)
            throw new Error("The parameter 'user_id' must be defined.");
        url_ = url_.replace("{user_id}", encodeURIComponent("" + user_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_user_roles_api_roles_user__user_id__roles_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_user_roles_api_roles_user__user_id__roles_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserRolesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserRolesResponse>;
        }));
    }

    protected processGet_user_roles_api_roles_user__user_id__roles_get(response: HttpResponseBase): Observable<UserRolesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRolesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get User Company Role
     * @return Successful Response
     */
    get_user_company_role_api_roles_user__user_id__company__company_id__get(user_id: number, company_id: number): Observable<UserCompanyRoleResponse> {
        let url_ = this.baseUrl + "/api/roles/user/{user_id}/company/{company_id}";
        if (user_id === undefined || user_id === null)
            throw new Error("The parameter 'user_id' must be defined.");
        url_ = url_.replace("{user_id}", encodeURIComponent("" + user_id));
        if (company_id === undefined || company_id === null)
            throw new Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_user_company_role_api_roles_user__user_id__company__company_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_user_company_role_api_roles_user__user_id__company__company_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserCompanyRoleResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserCompanyRoleResponse>;
        }));
    }

    protected processGet_user_company_role_api_roles_user__user_id__company__company_id__get(response: HttpResponseBase): Observable<UserCompanyRoleResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserCompanyRoleResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Jobsites
     * @return Successful Response
     */
    get_jobsites_api_jobsites_get(): Observable<JobsiteResponse[]> {
        let url_ = this.baseUrl + "/api/jobsites";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_jobsites_api_jobsites_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_jobsites_api_jobsites_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteResponse[]>;
        }));
    }

    protected processGet_jobsites_api_jobsites_get(response: HttpResponseBase): Observable<JobsiteResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(JobsiteResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Jobsite
     * @return Successful Response
     */
    create_jobsite_api_jobsites__post(body: JobsiteCreate): Observable<JobsiteResponse> {
        let url_ = this.baseUrl + "/api/jobsites/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_jobsite_api_jobsites__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_jobsite_api_jobsites__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteResponse>;
        }));
    }

    protected processCreate_jobsite_api_jobsites__post(response: HttpResponseBase): Observable<JobsiteResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Jobsite
     * @return Successful Response
     */
    get_jobsite_api_jobsites__jobsite_id__get(jobsite_id: number): Observable<JobsiteResponse> {
        let url_ = this.baseUrl + "/api/jobsites/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_jobsite_api_jobsites__jobsite_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_jobsite_api_jobsites__jobsite_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteResponse>;
        }));
    }

    protected processGet_jobsite_api_jobsites__jobsite_id__get(response: HttpResponseBase): Observable<JobsiteResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Jobsite
     * @return Successful Response
     */
    update_jobsite_api_jobsites__jobsite_id__put(jobsite_id: number, body: JobsiteUpdate): Observable<JobsiteResponse> {
        let url_ = this.baseUrl + "/api/jobsites/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_jobsite_api_jobsites__jobsite_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_jobsite_api_jobsites__jobsite_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteResponse>;
        }));
    }

    protected processUpdate_jobsite_api_jobsites__jobsite_id__put(response: HttpResponseBase): Observable<JobsiteResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Jobsite
     * @return Successful Response
     */
    delete_jobsite_api_jobsites__jobsite_id__delete(jobsite_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/jobsites/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_jobsite_api_jobsites__jobsite_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_jobsite_api_jobsites__jobsite_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete_jobsite_api_jobsites__jobsite_id__delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Deliveries By Jobsite
     * @return Successful Response
     */
    get_deliveries_by_jobsite_api_jobsites__jobsite_id__deliveries__get(jobsite_id: number): Observable<DeliveryResponse[]> {
        let url_ = this.baseUrl + "/api/jobsites/{jobsite_id}/deliveries/";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_deliveries_by_jobsite_api_jobsites__jobsite_id__deliveries__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_deliveries_by_jobsite_api_jobsites__jobsite_id__deliveries__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryResponse[]>;
        }));
    }

    protected processGet_deliveries_by_jobsite_api_jobsites__jobsite_id__deliveries__get(response: HttpResponseBase): Observable<DeliveryResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Diary Entry
     * @return Successful Response
     */
    create_diary_entry_api_diary_post(body: DiaryEntryCreate): Observable<DiaryEntryResponse> {
        let url_ = this.baseUrl + "/api/diary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_diary_entry_api_diary_post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_diary_entry_api_diary_post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiaryEntryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiaryEntryResponse>;
        }));
    }

    protected processCreate_diary_entry_api_diary_post(response: HttpResponseBase): Observable<DiaryEntryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiaryEntryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Site Diary Entries
     * @param page (optional) Page number
     * @param per_page (optional) Items per page
     * @param search (optional) Search term for work_completed, notes, or safety_issues
     * @param start_date (optional) Filter entries from this date
     * @param end_date (optional) Filter entries until this date
     * @param weather_condition (optional) Filter by weather condition
     * @param has_delays (optional) Filter entries with/without delays
     * @param has_safety_issues (optional) Filter entries with/without safety issues
     * @return Successful Response
     */
    get_site_diary_entries_api_diary__site_id__get(site_id: number, page: number | undefined, per_page: number | undefined, search: Search | undefined, start_date: Start_date | undefined, end_date: End_date | undefined, weather_condition: Weather_condition | undefined, has_delays: Has_delays | undefined, has_safety_issues: Has_safety_issues | undefined): Observable<PaginatedDiaryEntryResponse> {
        let url_ = this.baseUrl + "/api/diary/{site_id}?";
        if (site_id === undefined || site_id === null)
            throw new Error("The parameter 'site_id' must be defined.");
        url_ = url_.replace("{site_id}", encodeURIComponent("" + site_id));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (per_page === null)
            throw new Error("The parameter 'per_page' cannot be null.");
        else if (per_page !== undefined)
            url_ += "per_page=" + encodeURIComponent("" + per_page) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (weather_condition === null)
            throw new Error("The parameter 'weather_condition' cannot be null.");
        else if (weather_condition !== undefined)
            url_ += "weather_condition=" + encodeURIComponent("" + weather_condition) + "&";
        if (has_delays === null)
            throw new Error("The parameter 'has_delays' cannot be null.");
        else if (has_delays !== undefined)
            url_ += "has_delays=" + encodeURIComponent("" + has_delays) + "&";
        if (has_safety_issues === null)
            throw new Error("The parameter 'has_safety_issues' cannot be null.");
        else if (has_safety_issues !== undefined)
            url_ += "has_safety_issues=" + encodeURIComponent("" + has_safety_issues) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_site_diary_entries_api_diary__site_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_site_diary_entries_api_diary__site_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedDiaryEntryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedDiaryEntryResponse>;
        }));
    }

    protected processGet_site_diary_entries_api_diary__site_id__get(response: HttpResponseBase): Observable<PaginatedDiaryEntryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedDiaryEntryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Diary Entry
     * @return Successful Response
     */
    update_diary_entry_api_diary__entry_id__patch(entry_id: number, body: DiaryEntryUpdate): Observable<DiaryEntryResponse> {
        let url_ = this.baseUrl + "/api/diary/{entry_id}";
        if (entry_id === undefined || entry_id === null)
            throw new Error("The parameter 'entry_id' must be defined.");
        url_ = url_.replace("{entry_id}", encodeURIComponent("" + entry_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_diary_entry_api_diary__entry_id__patch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_diary_entry_api_diary__entry_id__patch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiaryEntryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiaryEntryResponse>;
        }));
    }

    protected processUpdate_diary_entry_api_diary__entry_id__patch(response: HttpResponseBase): Observable<DiaryEntryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiaryEntryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Export Diary Entry Pdf
     * @return Successful Response
     */
    export_diary_entry_pdf_api_diary__entry_id__export_get(entry_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/diary/{entry_id}/export";
        if (entry_id === undefined || entry_id === null)
            throw new Error("The parameter 'entry_id' must be defined.");
        url_ = url_.replace("{entry_id}", encodeURIComponent("" + entry_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExport_diary_entry_pdf_api_diary__entry_id__export_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExport_diary_entry_pdf_api_diary__entry_id__export_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processExport_diary_entry_pdf_api_diary__entry_id__export_get(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Export Site Diary Pdf
     * @param start_date (optional) Filter entries from this date
     * @param end_date (optional) Filter entries until this date
     * @return Successful Response
     */
    export_site_diary_pdf_api_diary__site_id__export_all_get(site_id: number, start_date: Start_date2 | undefined, end_date: End_date2 | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/diary/{site_id}/export/all?";
        if (site_id === undefined || site_id === null)
            throw new Error("The parameter 'site_id' must be defined.");
        url_ = url_.replace("{site_id}", encodeURIComponent("" + site_id));
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExport_site_diary_pdf_api_diary__site_id__export_all_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExport_site_diary_pdf_api_diary__site_id__export_all_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processExport_site_diary_pdf_api_diary__site_id__export_all_get(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Upload Photo
     * @param record_type (optional) 
     * @param record_id (optional) 
     * @param file (optional) 
     * @param description (optional) 
     * @return Successful Response
     */
    upload_photo_api_photos_post(record_type: Record_type | undefined, record_id: number | undefined, file: FileParameter | undefined, description: Description | undefined): Observable<PhotoResponse> {
        let url_ = this.baseUrl + "/api/photos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (record_type === null || record_type === undefined)
            throw new Error("The parameter 'record_type' cannot be null.");
        else
            content_.append("record_type", record_type.toString());
        if (record_id === null || record_id === undefined)
            throw new Error("The parameter 'record_id' cannot be null.");
        else
            content_.append("record_id", record_id.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("description", description.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload_photo_api_photos_post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload_photo_api_photos_post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PhotoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PhotoResponse>;
        }));
    }

    protected processUpload_photo_api_photos_post(response: HttpResponseBase): Observable<PhotoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PhotoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Photos
     * @return Successful Response
     */
    get_photos_api_photos_get(record_type: Record_type2, record_id: number): Observable<PhotoResponse[]> {
        let url_ = this.baseUrl + "/api/photos?";
        if (record_type === undefined || record_type === null)
            throw new Error("The parameter 'record_type' must be defined and cannot be null.");
        else
            url_ += "record_type=" + encodeURIComponent("" + record_type) + "&";
        if (record_id === undefined || record_id === null)
            throw new Error("The parameter 'record_id' must be defined and cannot be null.");
        else
            url_ += "record_id=" + encodeURIComponent("" + record_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_photos_api_photos_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_photos_api_photos_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PhotoResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PhotoResponse[]>;
        }));
    }

    protected processGet_photos_api_photos_get(response: HttpResponseBase): Observable<PhotoResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PhotoResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Serve Photo
     * @return Successful Response
     */
    serve_photo_api_photos_file__filename__get(filename: string): Observable<any> {
        let url_ = this.baseUrl + "/api/photos/file/{filename}";
        if (filename === undefined || filename === null)
            throw new Error("The parameter 'filename' must be defined.");
        url_ = url_.replace("{filename}", encodeURIComponent("" + filename));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processServe_photo_api_photos_file__filename__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processServe_photo_api_photos_file__filename__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processServe_photo_api_photos_file__filename__get(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Photo
     * @return Successful Response
     */
    delete_photo_api_photos__photo_id__delete(photo_id: number): Observable<any> {
        let url_ = this.baseUrl + "/api/photos/{photo_id}";
        if (photo_id === undefined || photo_id === null)
            throw new Error("The parameter 'photo_id' must be defined.");
        url_ = url_.replace("{photo_id}", encodeURIComponent("" + photo_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_photo_api_photos__photo_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_photo_api_photos__photo_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processDelete_photo_api_photos__photo_id__delete(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Photos For Entry
     * @return Successful Response
     */
    get_photos_for_entry_api_photos_entry__entry_id__get(entry_id: number): Observable<PhotoResponse[]> {
        let url_ = this.baseUrl + "/api/photos/entry/{entry_id}";
        if (entry_id === undefined || entry_id === null)
            throw new Error("The parameter 'entry_id' must be defined.");
        url_ = url_.replace("{entry_id}", encodeURIComponent("" + entry_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_photos_for_entry_api_photos_entry__entry_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_photos_for_entry_api_photos_entry__entry_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PhotoResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PhotoResponse[]>;
        }));
    }

    protected processGet_photos_for_entry_api_photos_entry__entry_id__get(response: HttpResponseBase): Observable<PhotoResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PhotoResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Delivery
     * @return Successful Response
     */
    create_delivery_api_deliveries__post(body: DeliveryCreate): Observable<DeliveryResponse> {
        let url_ = this.baseUrl + "/api/deliveries/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_delivery_api_deliveries__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_delivery_api_deliveries__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryResponse>;
        }));
    }

    protected processCreate_delivery_api_deliveries__post(response: HttpResponseBase): Observable<DeliveryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Deliveries By Jobsite
     * @return Successful Response
     */
    get_deliveries_by_jobsite_api_deliveries_jobsite__jobsite_id__get(jobsite_id: number): Observable<DeliveryResponse[]> {
        let url_ = this.baseUrl + "/api/deliveries/jobsite/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_deliveries_by_jobsite_api_deliveries_jobsite__jobsite_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_deliveries_by_jobsite_api_deliveries_jobsite__jobsite_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryResponse[]>;
        }));
    }

    protected processGet_deliveries_by_jobsite_api_deliveries_jobsite__jobsite_id__get(response: HttpResponseBase): Observable<DeliveryResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Delivery
     * @return Successful Response
     */
    get_delivery_api_deliveries__delivery_id__get(delivery_id: number): Observable<DeliveryResponse> {
        let url_ = this.baseUrl + "/api/deliveries/{delivery_id}";
        if (delivery_id === undefined || delivery_id === null)
            throw new Error("The parameter 'delivery_id' must be defined.");
        url_ = url_.replace("{delivery_id}", encodeURIComponent("" + delivery_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_delivery_api_deliveries__delivery_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_delivery_api_deliveries__delivery_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryResponse>;
        }));
    }

    protected processGet_delivery_api_deliveries__delivery_id__get(response: HttpResponseBase): Observable<DeliveryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Delivery
     * @return Successful Response
     */
    update_delivery_api_deliveries__delivery_id__put(delivery_id: number, body: DeliveryUpdate): Observable<DeliveryResponse> {
        let url_ = this.baseUrl + "/api/deliveries/{delivery_id}";
        if (delivery_id === undefined || delivery_id === null)
            throw new Error("The parameter 'delivery_id' must be defined.");
        url_ = url_.replace("{delivery_id}", encodeURIComponent("" + delivery_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_delivery_api_deliveries__delivery_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_delivery_api_deliveries__delivery_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryResponse>;
        }));
    }

    protected processUpdate_delivery_api_deliveries__delivery_id__put(response: HttpResponseBase): Observable<DeliveryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Delivery
     * @return Successful Response
     */
    delete_delivery_api_deliveries__delivery_id__delete(delivery_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/deliveries/{delivery_id}";
        if (delivery_id === undefined || delivery_id === null)
            throw new Error("The parameter 'delivery_id' must be defined.");
        url_ = url_.replace("{delivery_id}", encodeURIComponent("" + delivery_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_delivery_api_deliveries__delivery_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_delivery_api_deliveries__delivery_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete_delivery_api_deliveries__delivery_id__delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Visitors
     * @return Successful Response
     */
    get_visitors_api_visitors__get(): Observable<VisitorResponse[]> {
        let url_ = this.baseUrl + "/api/visitors/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_visitors_api_visitors__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_visitors_api_visitors__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VisitorResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VisitorResponse[]>;
        }));
    }

    protected processGet_visitors_api_visitors__get(response: HttpResponseBase): Observable<VisitorResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VisitorResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Visitor
     * @return Successful Response
     */
    create_visitor_api_visitors__post(body: VisitorCreate): Observable<VisitorResponse> {
        let url_ = this.baseUrl + "/api/visitors/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_visitor_api_visitors__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_visitor_api_visitors__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VisitorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VisitorResponse>;
        }));
    }

    protected processCreate_visitor_api_visitors__post(response: HttpResponseBase): Observable<VisitorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VisitorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Visitor
     * @return Successful Response
     */
    get_visitor_api_visitors__visitor_id__get(visitor_id: number): Observable<VisitorResponse> {
        let url_ = this.baseUrl + "/api/visitors/{visitor_id}";
        if (visitor_id === undefined || visitor_id === null)
            throw new Error("The parameter 'visitor_id' must be defined.");
        url_ = url_.replace("{visitor_id}", encodeURIComponent("" + visitor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_visitor_api_visitors__visitor_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_visitor_api_visitors__visitor_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VisitorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VisitorResponse>;
        }));
    }

    protected processGet_visitor_api_visitors__visitor_id__get(response: HttpResponseBase): Observable<VisitorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VisitorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Visitor
     * @return Successful Response
     */
    update_visitor_api_visitors__visitor_id__put(visitor_id: number, body: VisitorUpdate): Observable<VisitorResponse> {
        let url_ = this.baseUrl + "/api/visitors/{visitor_id}";
        if (visitor_id === undefined || visitor_id === null)
            throw new Error("The parameter 'visitor_id' must be defined.");
        url_ = url_.replace("{visitor_id}", encodeURIComponent("" + visitor_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_visitor_api_visitors__visitor_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_visitor_api_visitors__visitor_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VisitorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VisitorResponse>;
        }));
    }

    protected processUpdate_visitor_api_visitors__visitor_id__put(response: HttpResponseBase): Observable<VisitorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VisitorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Visitor
     * @return Successful Response
     */
    delete_visitor_api_visitors__visitor_id__delete(visitor_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/visitors/{visitor_id}";
        if (visitor_id === undefined || visitor_id === null)
            throw new Error("The parameter 'visitor_id' must be defined.");
        url_ = url_.replace("{visitor_id}", encodeURIComponent("" + visitor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_visitor_api_visitors__visitor_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_visitor_api_visitors__visitor_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete_visitor_api_visitors__visitor_id__delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Visitors By Jobsite
     * @return Successful Response
     */
    get_visitors_by_jobsite_api_visitors_jobsites__jobsite_id__visitors_get(jobsite_id: number): Observable<VisitorResponse[]> {
        let url_ = this.baseUrl + "/api/visitors/jobsites/{jobsite_id}/visitors";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_visitors_by_jobsite_api_visitors_jobsites__jobsite_id__visitors_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_visitors_by_jobsite_api_visitors_jobsites__jobsite_id__visitors_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VisitorResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VisitorResponse[]>;
        }));
    }

    protected processGet_visitors_by_jobsite_api_visitors_jobsites__jobsite_id__visitors_get(response: HttpResponseBase): Observable<VisitorResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VisitorResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Subcontractors
     * @return Successful Response
     */
    get_subcontractors_api_subcontractors__get(): Observable<SubcontractorResponse[]> {
        let url_ = this.baseUrl + "/api/subcontractors/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_subcontractors_api_subcontractors__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_subcontractors_api_subcontractors__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubcontractorResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubcontractorResponse[]>;
        }));
    }

    protected processGet_subcontractors_api_subcontractors__get(response: HttpResponseBase): Observable<SubcontractorResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SubcontractorResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Subcontractor
     * @return Successful Response
     */
    create_subcontractor_api_subcontractors__post(body: SubcontractorCreate): Observable<SubcontractorResponse> {
        let url_ = this.baseUrl + "/api/subcontractors/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_subcontractor_api_subcontractors__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_subcontractor_api_subcontractors__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubcontractorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubcontractorResponse>;
        }));
    }

    protected processCreate_subcontractor_api_subcontractors__post(response: HttpResponseBase): Observable<SubcontractorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubcontractorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Subcontractor
     * @return Successful Response
     */
    get_subcontractor_api_subcontractors__subcontractor_id__get(subcontractor_id: number): Observable<SubcontractorResponse> {
        let url_ = this.baseUrl + "/api/subcontractors/{subcontractor_id}";
        if (subcontractor_id === undefined || subcontractor_id === null)
            throw new Error("The parameter 'subcontractor_id' must be defined.");
        url_ = url_.replace("{subcontractor_id}", encodeURIComponent("" + subcontractor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_subcontractor_api_subcontractors__subcontractor_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_subcontractor_api_subcontractors__subcontractor_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubcontractorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubcontractorResponse>;
        }));
    }

    protected processGet_subcontractor_api_subcontractors__subcontractor_id__get(response: HttpResponseBase): Observable<SubcontractorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubcontractorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Subcontractor
     * @return Successful Response
     */
    update_subcontractor_api_subcontractors__subcontractor_id__put(subcontractor_id: number, body: SubcontractorUpdate): Observable<SubcontractorResponse> {
        let url_ = this.baseUrl + "/api/subcontractors/{subcontractor_id}";
        if (subcontractor_id === undefined || subcontractor_id === null)
            throw new Error("The parameter 'subcontractor_id' must be defined.");
        url_ = url_.replace("{subcontractor_id}", encodeURIComponent("" + subcontractor_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_subcontractor_api_subcontractors__subcontractor_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_subcontractor_api_subcontractors__subcontractor_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubcontractorResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubcontractorResponse>;
        }));
    }

    protected processUpdate_subcontractor_api_subcontractors__subcontractor_id__put(response: HttpResponseBase): Observable<SubcontractorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubcontractorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Subcontractor
     * @return Successful Response
     */
    delete_subcontractor_api_subcontractors__subcontractor_id__delete(subcontractor_id: number): Observable<any> {
        let url_ = this.baseUrl + "/api/subcontractors/{subcontractor_id}";
        if (subcontractor_id === undefined || subcontractor_id === null)
            throw new Error("The parameter 'subcontractor_id' must be defined.");
        url_ = url_.replace("{subcontractor_id}", encodeURIComponent("" + subcontractor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_subcontractor_api_subcontractors__subcontractor_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_subcontractor_api_subcontractors__subcontractor_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processDelete_subcontractor_api_subcontractors__subcontractor_id__delete(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Subcontractors By Jobsite
     * @return Successful Response
     */
    get_subcontractors_by_jobsite_api_subcontractors_jobsite__jobsite_id__get(jobsite_id: number): Observable<SubcontractorResponse[]> {
        let url_ = this.baseUrl + "/api/subcontractors/jobsite/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_subcontractors_by_jobsite_api_subcontractors_jobsite__jobsite_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_subcontractors_by_jobsite_api_subcontractors_jobsite__jobsite_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubcontractorResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubcontractorResponse[]>;
        }));
    }

    protected processGet_subcontractors_by_jobsite_api_subcontractors_jobsite__jobsite_id__get(response: HttpResponseBase): Observable<SubcontractorResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SubcontractorResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Inspections
     * @return Successful Response
     */
    get_inspections_api_inspections__get(): Observable<InspectionResponse[]> {
        let url_ = this.baseUrl + "/api/inspections/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_inspections_api_inspections__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_inspections_api_inspections__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InspectionResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InspectionResponse[]>;
        }));
    }

    protected processGet_inspections_api_inspections__get(response: HttpResponseBase): Observable<InspectionResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InspectionResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Inspection
     * @return Successful Response
     */
    create_inspection_api_inspections__post(body: InspectionCreate): Observable<InspectionResponse> {
        let url_ = this.baseUrl + "/api/inspections/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_inspection_api_inspections__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_inspection_api_inspections__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InspectionResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InspectionResponse>;
        }));
    }

    protected processCreate_inspection_api_inspections__post(response: HttpResponseBase): Observable<InspectionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InspectionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Inspection
     * @return Successful Response
     */
    get_inspection_api_inspections__inspection_id__get(inspection_id: number): Observable<InspectionResponse> {
        let url_ = this.baseUrl + "/api/inspections/{inspection_id}";
        if (inspection_id === undefined || inspection_id === null)
            throw new Error("The parameter 'inspection_id' must be defined.");
        url_ = url_.replace("{inspection_id}", encodeURIComponent("" + inspection_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_inspection_api_inspections__inspection_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_inspection_api_inspections__inspection_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InspectionResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InspectionResponse>;
        }));
    }

    protected processGet_inspection_api_inspections__inspection_id__get(response: HttpResponseBase): Observable<InspectionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InspectionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Inspection
     * @return Successful Response
     */
    update_inspection_api_inspections__inspection_id__put(inspection_id: number, body: InspectionUpdate): Observable<InspectionResponse> {
        let url_ = this.baseUrl + "/api/inspections/{inspection_id}";
        if (inspection_id === undefined || inspection_id === null)
            throw new Error("The parameter 'inspection_id' must be defined.");
        url_ = url_.replace("{inspection_id}", encodeURIComponent("" + inspection_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_inspection_api_inspections__inspection_id__put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_inspection_api_inspections__inspection_id__put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InspectionResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InspectionResponse>;
        }));
    }

    protected processUpdate_inspection_api_inspections__inspection_id__put(response: HttpResponseBase): Observable<InspectionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InspectionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Inspection
     * @return Successful Response
     */
    delete_inspection_api_inspections__inspection_id__delete(inspection_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/inspections/{inspection_id}";
        if (inspection_id === undefined || inspection_id === null)
            throw new Error("The parameter 'inspection_id' must be defined.");
        url_ = url_.replace("{inspection_id}", encodeURIComponent("" + inspection_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_inspection_api_inspections__inspection_id__delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_inspection_api_inspections__inspection_id__delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete_inspection_api_inspections__inspection_id__delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Inspections By Jobsite
     * @return Successful Response
     */
    get_inspections_by_jobsite_api_inspections_jobsites__jobsite_id__inspections_get(jobsite_id: number): Observable<InspectionResponse[]> {
        let url_ = this.baseUrl + "/api/inspections/jobsites/{jobsite_id}/inspections";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_inspections_by_jobsite_api_inspections_jobsites__jobsite_id__inspections_get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_inspections_by_jobsite_api_inspections_jobsites__jobsite_id__inspections_get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InspectionResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InspectionResponse[]>;
        }));
    }

    protected processGet_inspections_by_jobsite_api_inspections_jobsites__jobsite_id__inspections_get(response: HttpResponseBase): Observable<InspectionResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InspectionResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Hire Equipment
     * @return Successful Response
     */
    create_hire_equipment_api_hire_equipment__post(body: HireEquipmentCreate): Observable<HireEquipmentResponse> {
        let url_ = this.baseUrl + "/api/hire-equipment/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_hire_equipment_api_hire_equipment__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_hire_equipment_api_hire_equipment__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HireEquipmentResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HireEquipmentResponse>;
        }));
    }

    protected processCreate_hire_equipment_api_hire_equipment__post(response: HttpResponseBase): Observable<HireEquipmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HireEquipmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Hire Equipment
     * @return Successful Response
     */
    get_hire_equipment_api_hire_equipment__hire_equipment_id___get(hire_equipment_id: number): Observable<HireEquipmentResponse> {
        let url_ = this.baseUrl + "/api/hire-equipment/{hire_equipment_id}/";
        if (hire_equipment_id === undefined || hire_equipment_id === null)
            throw new Error("The parameter 'hire_equipment_id' must be defined.");
        url_ = url_.replace("{hire_equipment_id}", encodeURIComponent("" + hire_equipment_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_hire_equipment_api_hire_equipment__hire_equipment_id___get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_hire_equipment_api_hire_equipment__hire_equipment_id___get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HireEquipmentResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HireEquipmentResponse>;
        }));
    }

    protected processGet_hire_equipment_api_hire_equipment__hire_equipment_id___get(response: HttpResponseBase): Observable<HireEquipmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HireEquipmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update Hire Equipment
     * @return Successful Response
     */
    update_hire_equipment_api_hire_equipment__hire_equipment_id___put(hire_equipment_id: number, body: HireEquipmentUpdate): Observable<HireEquipmentResponse> {
        let url_ = this.baseUrl + "/api/hire-equipment/{hire_equipment_id}/";
        if (hire_equipment_id === undefined || hire_equipment_id === null)
            throw new Error("The parameter 'hire_equipment_id' must be defined.");
        url_ = url_.replace("{hire_equipment_id}", encodeURIComponent("" + hire_equipment_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate_hire_equipment_api_hire_equipment__hire_equipment_id___put(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate_hire_equipment_api_hire_equipment__hire_equipment_id___put(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HireEquipmentResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HireEquipmentResponse>;
        }));
    }

    protected processUpdate_hire_equipment_api_hire_equipment__hire_equipment_id___put(response: HttpResponseBase): Observable<HireEquipmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HireEquipmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Hire Equipment
     * @return Successful Response
     */
    delete_hire_equipment_api_hire_equipment__hire_equipment_id___delete(hire_equipment_id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/hire-equipment/{hire_equipment_id}/";
        if (hire_equipment_id === undefined || hire_equipment_id === null)
            throw new Error("The parameter 'hire_equipment_id' must be defined.");
        url_ = url_.replace("{hire_equipment_id}", encodeURIComponent("" + hire_equipment_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete_hire_equipment_api_hire_equipment__hire_equipment_id___delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete_hire_equipment_api_hire_equipment__hire_equipment_id___delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete_hire_equipment_api_hire_equipment__hire_equipment_id___delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Hire Equipment By Jobsite
     * @return Successful Response
     */
    get_hire_equipment_by_jobsite_api_hire_equipment_jobsite__jobsite_id___get(jobsite_id: number): Observable<HireEquipmentResponse[]> {
        let url_ = this.baseUrl + "/api/hire-equipment/jobsite/{jobsite_id}/";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_hire_equipment_by_jobsite_api_hire_equipment_jobsite__jobsite_id___get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_hire_equipment_by_jobsite_api_hire_equipment_jobsite__jobsite_id___get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<HireEquipmentResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<HireEquipmentResponse[]>;
        }));
    }

    protected processGet_hire_equipment_by_jobsite_api_hire_equipment_jobsite__jobsite_id___get(response: HttpResponseBase): Observable<HireEquipmentResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HireEquipmentResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Qr Code
     * @return QR code created successfully
     */
    create_qr_code_api_qrcodes_create_qr_code__jobsite_id__post(jobsite_id: number): Observable<QRCodeResponse> {
        let url_ = this.baseUrl + "/api/qrcodes/create-qr-code/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate_qr_code_api_qrcodes_create_qr_code__jobsite_id__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate_qr_code_api_qrcodes_create_qr_code__jobsite_id__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QRCodeResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QRCodeResponse>;
        }));
    }

    protected processCreate_qr_code_api_qrcodes_create_qr_code__jobsite_id__post(response: HttpResponseBase): Observable<QRCodeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QRCodeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Unauthorized - Invalid or missing authentication token", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Jobsite not found", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Qr Code Image
     * @return QR code image
     */
    get_qr_code_image_api_qrcodes_get_qr_code_image__token__get(token: string): Observable<any> {
        let url_ = this.baseUrl + "/api/qrcodes/get-qr-code-image/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_qr_code_image_api_qrcodes_get_qr_code_image__token__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_qr_code_image_api_qrcodes_get_qr_code_image__token__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processGet_qr_code_image_api_qrcodes_get_qr_code_image__token__get(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("QR code not found", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Verify Qr Code
     * @return QR code verified successfully
     */
    verify_qr_code_api_qrcodes_verify_qr_code_post(body: QRCodeVerifyRequest): Observable<JobsiteQRCodeResponse> {
        let url_ = this.baseUrl + "/api/qrcodes/verify-qr-code";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerify_qr_code_api_qrcodes_verify_qr_code_post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerify_qr_code_api_qrcodes_verify_qr_code_post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteQRCodeResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteQRCodeResponse>;
        }));
    }

    protected processVerify_qr_code_api_qrcodes_verify_qr_code_post(response: HttpResponseBase): Observable<JobsiteQRCodeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteQRCodeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Bad request - Token is required", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Invalid QR code", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Regenerate Qr Code
     * @return QR code regenerated successfully
     */
    regenerate_qr_code_api_qrcodes_regenerate_qr_code__jobsite_id__post(jobsite_id: number): Observable<QRCodeResponse> {
        let url_ = this.baseUrl + "/api/qrcodes/regenerate-qr-code/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegenerate_qr_code_api_qrcodes_regenerate_qr_code__jobsite_id__post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegenerate_qr_code_api_qrcodes_regenerate_qr_code__jobsite_id__post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QRCodeResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QRCodeResponse>;
        }));
    }

    protected processRegenerate_qr_code_api_qrcodes_regenerate_qr_code__jobsite_id__post(response: HttpResponseBase): Observable<QRCodeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QRCodeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Unauthorized - Invalid or missing authentication token", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Forbidden - User does not have admin access", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Jobsite not found", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Qr Code Data
     * @return QR code data retrieved successfully
     */
    get_qr_code_data_api_qrcodes_get_qr_code_data__jobsite_id__get(jobsite_id: number): Observable<JobsiteQRCodeResponse> {
        let url_ = this.baseUrl + "/api/qrcodes/get-qr-code-data/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_qr_code_data_api_qrcodes_get_qr_code_data__jobsite_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_qr_code_data_api_qrcodes_get_qr_code_data__jobsite_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteQRCodeResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteQRCodeResponse>;
        }));
    }

    protected processGet_qr_code_data_api_qrcodes_get_qr_code_data__jobsite_id__get(response: HttpResponseBase): Observable<JobsiteQRCodeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteQRCodeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Unauthorized - Invalid or missing authentication token", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Jobsite not found", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Check In
     * @return Check-in successful
     */
    check_in_api_qrcodes_check_in_post(body: CheckInRequest): Observable<CheckInResponse> {
        let url_ = this.baseUrl + "/api/qrcodes/check-in";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheck_in_api_qrcodes_check_in_post(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheck_in_api_qrcodes_check_in_post(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CheckInResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CheckInResponse>;
        }));
    }

    protected processCheck_in_api_qrcodes_check_in_post(response: HttpResponseBase): Observable<CheckInResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CheckInResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Jobsite ID does not match QR code", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Invalid QR code", status, _responseText, _headers);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Jobsite Weather
     * @return Successful Response
     */
    get_jobsite_weather_api_weather__jobsite_id__get(jobsite_id: number): Observable<JobsiteWeatherResponse> {
        let url_ = this.baseUrl + "/api/weather/{jobsite_id}";
        if (jobsite_id === undefined || jobsite_id === null)
            throw new Error("The parameter 'jobsite_id' must be defined.");
        url_ = url_.replace("{jobsite_id}", encodeURIComponent("" + jobsite_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_jobsite_weather_api_weather__jobsite_id__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_jobsite_weather_api_weather__jobsite_id__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JobsiteWeatherResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JobsiteWeatherResponse>;
        }));
    }

    protected processGet_jobsite_weather_api_weather__jobsite_id__get(response: HttpResponseBase): Observable<JobsiteWeatherResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JobsiteWeatherResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Weather By Coordinates
     * @return Successful Response
     */
    get_weather_by_coordinates_api_weather_coordinates__latitude___longitude__get(latitude: number, longitude: number): Observable<WeatherForecast> {
        let url_ = this.baseUrl + "/api/weather/coordinates/{latitude}/{longitude}";
        if (latitude === undefined || latitude === null)
            throw new Error("The parameter 'latitude' must be defined.");
        url_ = url_.replace("{latitude}", encodeURIComponent("" + latitude));
        if (longitude === undefined || longitude === null)
            throw new Error("The parameter 'longitude' must be defined.");
        url_ = url_.replace("{longitude}", encodeURIComponent("" + longitude));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_weather_by_coordinates_api_weather_coordinates__latitude___longitude__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_weather_by_coordinates_api_weather_coordinates__latitude___longitude__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast>;
        }));
    }

    protected processGet_weather_by_coordinates_api_weather_coordinates__latitude___longitude__get(response: HttpResponseBase): Observable<WeatherForecast> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeatherForecast.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Root
     * @return Successful Response
     */
    root__get(): Observable<any> {
        let url_ = this.baseUrl + "/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoot__get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoot__get(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processRoot__get(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AuthResponse implements IAuthResponse {
    message!: string;
    user_role?: User_role;

    [key: string]: any;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.user_role = _data["user_role"];
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["user_role"] = this.user_role;
        return data;
    }
}

export interface IAuthResponse {
    message: string;
    user_role?: User_role;

    [key: string]: any;
}

export class Body_login_api_auth_token_post implements IBody_login_api_auth_token_post {
    grant_type?: Grant_type;
    username!: string;
    password!: string;
    scope?: string;
    client_id?: Client_id;
    client_secret?: Client_secret;

    [key: string]: any;

    constructor(data?: IBody_login_api_auth_token_post) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scope = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.grant_type = _data["grant_type"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.scope = _data["scope"] !== undefined ? _data["scope"] : "";
            this.client_id = _data["client_id"];
            this.client_secret = _data["client_secret"];
        }
    }

    static fromJS(data: any): Body_login_api_auth_token_post {
        data = typeof data === 'object' ? data : {};
        let result = new Body_login_api_auth_token_post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["grant_type"] = this.grant_type;
        data["username"] = this.username;
        data["password"] = this.password;
        data["scope"] = this.scope;
        data["client_id"] = this.client_id;
        data["client_secret"] = this.client_secret;
        return data;
    }
}

export interface IBody_login_api_auth_token_post {
    grant_type?: Grant_type;
    username: string;
    password: string;
    scope?: string;
    client_id?: Client_id;
    client_secret?: Client_secret;

    [key: string]: any;
}

export class Body_upload_photo_api_photos_post implements IBody_upload_photo_api_photos_post {
    record_type!: Record_type;
    record_id!: number;
    file!: string;
    description?: Description;

    [key: string]: any;

    constructor(data?: IBody_upload_photo_api_photos_post) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.record_type = _data["record_type"];
            this.record_id = _data["record_id"];
            this.file = _data["file"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): Body_upload_photo_api_photos_post {
        data = typeof data === 'object' ? data : {};
        let result = new Body_upload_photo_api_photos_post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["record_type"] = this.record_type;
        data["record_id"] = this.record_id;
        data["file"] = this.file;
        data["description"] = this.description;
        return data;
    }
}

export interface IBody_upload_photo_api_photos_post {
    record_type: Record_type;
    record_id: number;
    file: string;
    description?: Description;

    [key: string]: any;
}

/** Schema for check-in request data. This will be used to create a diary entry for the check-in. */
export class CheckInRequest implements ICheckInRequest {
    /** ID of the jobsite */
    jobsite_id!: number;
    /** Name of the person checking in */
    name!: string;
    /** Contact information (email or phone) */
    contact_info?: Contact_info;
    /** Company name (for contractors) */
    company?: Company;
    /** Type of person checking in */
    type!: CheckInRequestType;
    /** Whether the contractor has been inducted (null for visitors) */
    inducted?: Inducted;
    /** QR code token used for validation */
    token!: string;

    [key: string]: any;

    constructor(data?: ICheckInRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.jobsite_id = _data["jobsite_id"];
            this.name = _data["name"];
            this.contact_info = _data["contact_info"];
            this.company = _data["company"];
            this.type = _data["type"];
            this.inducted = _data["inducted"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): CheckInRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CheckInRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["jobsite_id"] = this.jobsite_id;
        data["name"] = this.name;
        data["contact_info"] = this.contact_info;
        data["company"] = this.company;
        data["type"] = this.type;
        data["inducted"] = this.inducted;
        data["token"] = this.token;
        return data;
    }
}

/** Schema for check-in request data. This will be used to create a diary entry for the check-in. */
export interface ICheckInRequest {
    /** ID of the jobsite */
    jobsite_id: number;
    /** Name of the person checking in */
    name: string;
    /** Contact information (email or phone) */
    contact_info?: Contact_info;
    /** Company name (for contractors) */
    company?: Company;
    /** Type of person checking in */
    type: CheckInRequestType;
    /** Whether the contractor has been inducted (null for visitors) */
    inducted?: Inducted;
    /** QR code token used for validation */
    token: string;

    [key: string]: any;
}

/** Schema for check-in response data. */
export class CheckInResponse implements ICheckInResponse {
    /** Whether the check-in was successful */
    success!: boolean;
    /** Message describing the result */
    message!: string;
    /** Name of the jobsite */
    jobsite_name!: string;
    /** Time of check-in */
    check_in_time!: Date;
    /** ID of the created diary entry */
    diary_entry_id!: number;

    [key: string]: any;

    constructor(data?: ICheckInResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.message = _data["message"];
            this.jobsite_name = _data["jobsite_name"];
            this.check_in_time = _data["check_in_time"] ? new Date(_data["check_in_time"].toString()) : <any>undefined;
            this.diary_entry_id = _data["diary_entry_id"];
        }
    }

    static fromJS(data: any): CheckInResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CheckInResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["message"] = this.message;
        data["jobsite_name"] = this.jobsite_name;
        data["check_in_time"] = this.check_in_time ? this.check_in_time.toISOString() : <any>undefined;
        data["diary_entry_id"] = this.diary_entry_id;
        return data;
    }
}

/** Schema for check-in response data. */
export interface ICheckInResponse {
    /** Whether the check-in was successful */
    success: boolean;
    /** Message describing the result */
    message: string;
    /** Name of the jobsite */
    jobsite_name: string;
    /** Time of check-in */
    check_in_time: Date;
    /** ID of the created diary entry */
    diary_entry_id: number;

    [key: string]: any;
}

export class CompanyCreate implements ICompanyCreate {
    name!: string;
    address?: Address;
    contact_number?: Contact_number;

    [key: string]: any;

    constructor(data?: ICompanyCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.address = _data["address"];
            this.contact_number = _data["contact_number"];
        }
    }

    static fromJS(data: any): CompanyCreate {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["address"] = this.address;
        data["contact_number"] = this.contact_number;
        return data;
    }
}

export interface ICompanyCreate {
    name: string;
    address?: Address;
    contact_number?: Contact_number;

    [key: string]: any;
}

export class CompanyMember implements ICompanyMember {
    id!: number;
    name!: string;
    email!: string;
    role!: UserRole;

    [key: string]: any;

    constructor(data?: ICompanyMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): CompanyMember {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["role"] = this.role;
        return data;
    }
}

export interface ICompanyMember {
    id: number;
    name: string;
    email: string;
    role: UserRole;

    [key: string]: any;
}

export class CompanyResponse implements ICompanyResponse {
    created_at!: Date;
    updated_at!: Date;
    name!: string;
    address?: address;
    contact_number?: contact_number;
    id!: number;
    members?: CompanyMember[];

    [key: string]: any;

    constructor(data?: ICompanyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"] ? new Date(_data["updated_at"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.address = _data["address"];
            this.contact_number = _data["contact_number"];
            this.id = _data["id"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(CompanyMember.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at ? this.updated_at.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["address"] = this.address;
        data["contact_number"] = this.contact_number;
        data["id"] = this.id;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompanyResponse {
    created_at: Date;
    updated_at: Date;
    name: string;
    address?: address;
    contact_number?: contact_number;
    id: number;
    members?: CompanyMember[];

    [key: string]: any;
}

export class CompanyRole implements ICompanyRole {
    company_id!: number;
    company_name!: string;
    role!: string;

    [key: string]: any;

    constructor(data?: ICompanyRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_id = _data["company_id"];
            this.company_name = _data["company_name"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): CompanyRole {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_id"] = this.company_id;
        data["company_name"] = this.company_name;
        data["role"] = this.role;
        return data;
    }
}

export interface ICompanyRole {
    company_id: number;
    company_name: string;
    role: string;

    [key: string]: any;
}

export class CompanyUpdate implements ICompanyUpdate {
    name?: Name;
    address?: address2;
    contact_number?: contact_number2;

    [key: string]: any;

    constructor(data?: ICompanyUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.address = _data["address"];
            this.contact_number = _data["contact_number"];
        }
    }

    static fromJS(data: any): CompanyUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["address"] = this.address;
        data["contact_number"] = this.contact_number;
        return data;
    }
}

export interface ICompanyUpdate {
    name?: Name;
    address?: address2;
    contact_number?: contact_number2;

    [key: string]: any;
}

/** Current weather conditions */
export class CurrentWeather implements ICurrentWeather {
    time!: Date;
    /** Temperature at 2 meters above ground in °C */
    temperature_2m!: number;
    /** Relative humidity at 2 meters above ground in % */
    relative_humidity_2m?: Relative_humidity_2m;
    /** Wind speed at 10 meters above ground in km/h */
    wind_speed_10m!: number;
    /** Weather condition code */
    weather_code!: number;

    [key: string]: any;

    constructor(data?: ICurrentWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.time = _data["time"] ? new Date(_data["time"].toString()) : <any>undefined;
            this.temperature_2m = _data["temperature_2m"];
            this.relative_humidity_2m = _data["relative_humidity_2m"];
            this.wind_speed_10m = _data["wind_speed_10m"];
            this.weather_code = _data["weather_code"];
        }
    }

    static fromJS(data: any): CurrentWeather {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentWeather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["temperature_2m"] = this.temperature_2m;
        data["relative_humidity_2m"] = this.relative_humidity_2m;
        data["wind_speed_10m"] = this.wind_speed_10m;
        data["weather_code"] = this.weather_code;
        return data;
    }
}

/** Current weather conditions */
export interface ICurrentWeather {
    time: Date;
    /** Temperature at 2 meters above ground in °C */
    temperature_2m: number;
    /** Relative humidity at 2 meters above ground in % */
    relative_humidity_2m?: Relative_humidity_2m;
    /** Wind speed at 10 meters above ground in km/h */
    wind_speed_10m: number;
    /** Weather condition code */
    weather_code: number;

    [key: string]: any;
}

/** Daily weather forecast */
export class DailyWeather implements IDailyWeather {
    time!: Date[];
    /** Maximum daily temperature at 2 meters above ground in °C */
    temperature_2m_max!: number[];
    /** Minimum daily temperature at 2 meters above ground in °C */
    temperature_2m_min!: number[];
    /** Sum of daily precipitation in mm */
    precipitation_sum!: number[];
    /** Weather condition codes */
    weather_code!: number[];

    [key: string]: any;

    constructor(data?: IDailyWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.time = [];
            this.temperature_2m_max = [];
            this.temperature_2m_min = [];
            this.precipitation_sum = [];
            this.weather_code = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["time"])) {
                this.time = [] as any;
                for (let item of _data["time"])
                    this.time!.push(new Date(item));
            }
            if (Array.isArray(_data["temperature_2m_max"])) {
                this.temperature_2m_max = [] as any;
                for (let item of _data["temperature_2m_max"])
                    this.temperature_2m_max!.push(item);
            }
            if (Array.isArray(_data["temperature_2m_min"])) {
                this.temperature_2m_min = [] as any;
                for (let item of _data["temperature_2m_min"])
                    this.temperature_2m_min!.push(item);
            }
            if (Array.isArray(_data["precipitation_sum"])) {
                this.precipitation_sum = [] as any;
                for (let item of _data["precipitation_sum"])
                    this.precipitation_sum!.push(item);
            }
            if (Array.isArray(_data["weather_code"])) {
                this.weather_code = [] as any;
                for (let item of _data["weather_code"])
                    this.weather_code!.push(item);
            }
        }
    }

    static fromJS(data: any): DailyWeather {
        data = typeof data === 'object' ? data : {};
        let result = new DailyWeather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.time)) {
            data["time"] = [];
            for (let item of this.time)
                data["time"].push(item.toISOString());
        }
        if (Array.isArray(this.temperature_2m_max)) {
            data["temperature_2m_max"] = [];
            for (let item of this.temperature_2m_max)
                data["temperature_2m_max"].push(item);
        }
        if (Array.isArray(this.temperature_2m_min)) {
            data["temperature_2m_min"] = [];
            for (let item of this.temperature_2m_min)
                data["temperature_2m_min"].push(item);
        }
        if (Array.isArray(this.precipitation_sum)) {
            data["precipitation_sum"] = [];
            for (let item of this.precipitation_sum)
                data["precipitation_sum"].push(item);
        }
        if (Array.isArray(this.weather_code)) {
            data["weather_code"] = [];
            for (let item of this.weather_code)
                data["weather_code"].push(item);
        }
        return data;
    }
}

/** Daily weather forecast */
export interface IDailyWeather {
    time: Date[];
    /** Maximum daily temperature at 2 meters above ground in °C */
    temperature_2m_max: number[];
    /** Minimum daily temperature at 2 meters above ground in °C */
    temperature_2m_min: number[];
    /** Sum of daily precipitation in mm */
    precipitation_sum: number[];
    /** Weather condition codes */
    weather_code: number[];

    [key: string]: any;
}

export class DeliveryCreate implements IDeliveryCreate {
    company_name!: string;
    item!: string;
    qty!: number;
    notes?: Notes;
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: IDeliveryCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item = _data["item"];
            this.qty = _data["qty"];
            this.notes = _data["notes"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): DeliveryCreate {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item"] = this.item;
        data["qty"] = this.qty;
        data["notes"] = this.notes;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

export interface IDeliveryCreate {
    company_name: string;
    item: string;
    qty: number;
    notes?: Notes;
    jobsite_id: number;

    [key: string]: any;
}

export class DeliveryResponse implements IDeliveryResponse {
    company_name!: string;
    item!: string;
    qty!: number;
    notes?: notes;
    id!: number;
    jobsite_id!: number;
    created_at!: Date;
    updated_at?: Updated_at;

    [key: string]: any;

    constructor(data?: IDeliveryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item = _data["item"];
            this.qty = _data["qty"];
            this.notes = _data["notes"];
            this.id = _data["id"];
            this.jobsite_id = _data["jobsite_id"];
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): DeliveryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item"] = this.item;
        data["qty"] = this.qty;
        data["notes"] = this.notes;
        data["id"] = this.id;
        data["jobsite_id"] = this.jobsite_id;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface IDeliveryResponse {
    company_name: string;
    item: string;
    qty: number;
    notes?: notes;
    id: number;
    jobsite_id: number;
    created_at: Date;
    updated_at?: Updated_at;

    [key: string]: any;
}

export class DeliveryUpdate implements IDeliveryUpdate {
    company_name?: Company_name;
    item?: Item;
    qty?: Qty;
    notes?: notes2;

    [key: string]: any;

    constructor(data?: IDeliveryUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item = _data["item"];
            this.qty = _data["qty"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): DeliveryUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item"] = this.item;
        data["qty"] = this.qty;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IDeliveryUpdate {
    company_name?: Company_name;
    item?: Item;
    qty?: Qty;
    notes?: notes2;

    [key: string]: any;
}

export class DiaryEntryCreate implements IDiaryEntryCreate {
    site_id!: number;
    /** Full timestamp of the diary entry */
    date!: Date;
    weather?: Weather;
    delays?: Delays;
    work_completed!: string;
    notes?: notes3;
    safety_issues?: Safety_issues;

    [key: string]: any;

    constructor(data?: IDiaryEntryCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.site_id = _data["site_id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.weather = _data["weather"];
            this.delays = _data["delays"];
            this.work_completed = _data["work_completed"];
            this.notes = _data["notes"];
            this.safety_issues = _data["safety_issues"];
        }
    }

    static fromJS(data: any): DiaryEntryCreate {
        data = typeof data === 'object' ? data : {};
        let result = new DiaryEntryCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["site_id"] = this.site_id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["weather"] = this.weather;
        data["delays"] = this.delays;
        data["work_completed"] = this.work_completed;
        data["notes"] = this.notes;
        data["safety_issues"] = this.safety_issues;
        return data;
    }
}

export interface IDiaryEntryCreate {
    site_id: number;
    /** Full timestamp of the diary entry */
    date: Date;
    weather?: Weather;
    delays?: Delays;
    work_completed: string;
    notes?: notes3;
    safety_issues?: Safety_issues;

    [key: string]: any;
}

export class DiaryEntryResponse implements IDiaryEntryResponse {
    site_id!: number;
    /** Full timestamp of the diary entry */
    date!: Date;
    weather?: weather;
    delays?: delays;
    work_completed!: string;
    notes?: notes4;
    safety_issues?: safety_issues;
    id!: number;
    created_by_id!: number;

    [key: string]: any;

    constructor(data?: IDiaryEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.site_id = _data["site_id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.weather = _data["weather"];
            this.delays = _data["delays"];
            this.work_completed = _data["work_completed"];
            this.notes = _data["notes"];
            this.safety_issues = _data["safety_issues"];
            this.id = _data["id"];
            this.created_by_id = _data["created_by_id"];
        }
    }

    static fromJS(data: any): DiaryEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiaryEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["site_id"] = this.site_id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["weather"] = this.weather;
        data["delays"] = this.delays;
        data["work_completed"] = this.work_completed;
        data["notes"] = this.notes;
        data["safety_issues"] = this.safety_issues;
        data["id"] = this.id;
        data["created_by_id"] = this.created_by_id;
        return data;
    }
}

export interface IDiaryEntryResponse {
    site_id: number;
    /** Full timestamp of the diary entry */
    date: Date;
    weather?: weather;
    delays?: delays;
    work_completed: string;
    notes?: notes4;
    safety_issues?: safety_issues;
    id: number;
    created_by_id: number;

    [key: string]: any;
}

export class DiaryEntryUpdate implements IDiaryEntryUpdate {
    weather?: weather2;
    work_completed?: Work_completed;
    delays?: delays2;
    notes?: notes5;
    safety_issues?: safety_issues2;

    [key: string]: any;

    constructor(data?: IDiaryEntryUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.weather = _data["weather"];
            this.work_completed = _data["work_completed"];
            this.delays = _data["delays"];
            this.notes = _data["notes"];
            this.safety_issues = _data["safety_issues"];
        }
    }

    static fromJS(data: any): DiaryEntryUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new DiaryEntryUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["weather"] = this.weather;
        data["work_completed"] = this.work_completed;
        data["delays"] = this.delays;
        data["notes"] = this.notes;
        data["safety_issues"] = this.safety_issues;
        return data;
    }
}

export interface IDiaryEntryUpdate {
    weather?: weather2;
    work_completed?: Work_completed;
    delays?: delays2;
    notes?: notes5;
    safety_issues?: safety_issues2;

    [key: string]: any;
}

export class HTTPValidationError implements IHTTPValidationError {
    detail?: ValidationError[];

    [key: string]: any;

    constructor(data?: IHTTPValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["detail"])) {
                this.detail = [] as any;
                for (let item of _data["detail"])
                    this.detail!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HTTPValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new HTTPValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.detail)) {
            data["detail"] = [];
            for (let item of this.detail)
                data["detail"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHTTPValidationError {
    detail?: ValidationError[];

    [key: string]: any;
}

export class HireEquipmentCreate implements IHireEquipmentCreate {
    jobsite_id!: number;
    item!: string;
    on_hire!: Date;
    off_hire?: Off_hire;

    [key: string]: any;

    constructor(data?: IHireEquipmentCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.jobsite_id = _data["jobsite_id"];
            this.item = _data["item"];
            this.on_hire = _data["on_hire"] ? new Date(_data["on_hire"].toString()) : <any>undefined;
            this.off_hire = _data["off_hire"];
        }
    }

    static fromJS(data: any): HireEquipmentCreate {
        data = typeof data === 'object' ? data : {};
        let result = new HireEquipmentCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["jobsite_id"] = this.jobsite_id;
        data["item"] = this.item;
        data["on_hire"] = this.on_hire ? this.on_hire.toISOString() : <any>undefined;
        data["off_hire"] = this.off_hire;
        return data;
    }
}

export interface IHireEquipmentCreate {
    jobsite_id: number;
    item: string;
    on_hire: Date;
    off_hire?: Off_hire;

    [key: string]: any;
}

export class HireEquipmentResponse implements IHireEquipmentResponse {
    created_at!: Date;
    updated_at!: Date;
    jobsite_id!: number;
    item!: string;
    on_hire!: Date;
    off_hire?: off_hire;
    id!: number;

    [key: string]: any;

    constructor(data?: IHireEquipmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"] ? new Date(_data["updated_at"].toString()) : <any>undefined;
            this.jobsite_id = _data["jobsite_id"];
            this.item = _data["item"];
            this.on_hire = _data["on_hire"] ? new Date(_data["on_hire"].toString()) : <any>undefined;
            this.off_hire = _data["off_hire"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HireEquipmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HireEquipmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at ? this.updated_at.toISOString() : <any>undefined;
        data["jobsite_id"] = this.jobsite_id;
        data["item"] = this.item;
        data["on_hire"] = this.on_hire ? this.on_hire.toISOString() : <any>undefined;
        data["off_hire"] = this.off_hire;
        data["id"] = this.id;
        return data;
    }
}

export interface IHireEquipmentResponse {
    created_at: Date;
    updated_at: Date;
    jobsite_id: number;
    item: string;
    on_hire: Date;
    off_hire?: off_hire;
    id: number;

    [key: string]: any;
}

export class HireEquipmentUpdate implements IHireEquipmentUpdate {
    item?: item;
    on_hire?: On_hire;
    off_hire?: off_hire2;

    [key: string]: any;

    constructor(data?: IHireEquipmentUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.item = _data["item"];
            this.on_hire = _data["on_hire"];
            this.off_hire = _data["off_hire"];
        }
    }

    static fromJS(data: any): HireEquipmentUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new HireEquipmentUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["item"] = this.item;
        data["on_hire"] = this.on_hire;
        data["off_hire"] = this.off_hire;
        return data;
    }
}

export interface IHireEquipmentUpdate {
    item?: item;
    on_hire?: On_hire;
    off_hire?: off_hire2;

    [key: string]: any;
}

/** Hourly weather forecast */
export class HourlyWeather implements IHourlyWeather {
    time!: Date[];
    /** Temperature at 2 meters above ground in °C */
    temperature_2m!: number[];
    /** Relative humidity at 2 meters above ground in % */
    relative_humidity_2m!: number[];
    /** Wind speed at 10 meters above ground in km/h */
    wind_speed_10m!: number[];
    /** Weather condition codes */
    weather_code!: number[];

    [key: string]: any;

    constructor(data?: IHourlyWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.time = [];
            this.temperature_2m = [];
            this.relative_humidity_2m = [];
            this.wind_speed_10m = [];
            this.weather_code = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["time"])) {
                this.time = [] as any;
                for (let item of _data["time"])
                    this.time!.push(new Date(item));
            }
            if (Array.isArray(_data["temperature_2m"])) {
                this.temperature_2m = [] as any;
                for (let item of _data["temperature_2m"])
                    this.temperature_2m!.push(item);
            }
            if (Array.isArray(_data["relative_humidity_2m"])) {
                this.relative_humidity_2m = [] as any;
                for (let item of _data["relative_humidity_2m"])
                    this.relative_humidity_2m!.push(item);
            }
            if (Array.isArray(_data["wind_speed_10m"])) {
                this.wind_speed_10m = [] as any;
                for (let item of _data["wind_speed_10m"])
                    this.wind_speed_10m!.push(item);
            }
            if (Array.isArray(_data["weather_code"])) {
                this.weather_code = [] as any;
                for (let item of _data["weather_code"])
                    this.weather_code!.push(item);
            }
        }
    }

    static fromJS(data: any): HourlyWeather {
        data = typeof data === 'object' ? data : {};
        let result = new HourlyWeather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.time)) {
            data["time"] = [];
            for (let item of this.time)
                data["time"].push(item.toISOString());
        }
        if (Array.isArray(this.temperature_2m)) {
            data["temperature_2m"] = [];
            for (let item of this.temperature_2m)
                data["temperature_2m"].push(item);
        }
        if (Array.isArray(this.relative_humidity_2m)) {
            data["relative_humidity_2m"] = [];
            for (let item of this.relative_humidity_2m)
                data["relative_humidity_2m"].push(item);
        }
        if (Array.isArray(this.wind_speed_10m)) {
            data["wind_speed_10m"] = [];
            for (let item of this.wind_speed_10m)
                data["wind_speed_10m"].push(item);
        }
        if (Array.isArray(this.weather_code)) {
            data["weather_code"] = [];
            for (let item of this.weather_code)
                data["weather_code"].push(item);
        }
        return data;
    }
}

/** Hourly weather forecast */
export interface IHourlyWeather {
    time: Date[];
    /** Temperature at 2 meters above ground in °C */
    temperature_2m: number[];
    /** Relative humidity at 2 meters above ground in % */
    relative_humidity_2m: number[];
    /** Wind speed at 10 meters above ground in km/h */
    wind_speed_10m: number[];
    /** Weather condition codes */
    weather_code: number[];

    [key: string]: any;
}

export class InspectionCreate implements IInspectionCreate {
    company_name!: string;
    item_inspected!: string;
    notes?: notes6;
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: IInspectionCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item_inspected = _data["item_inspected"];
            this.notes = _data["notes"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): InspectionCreate {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item_inspected"] = this.item_inspected;
        data["notes"] = this.notes;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

export interface IInspectionCreate {
    company_name: string;
    item_inspected: string;
    notes?: notes6;
    jobsite_id: number;

    [key: string]: any;
}

export class InspectionResponse implements IInspectionResponse {
    company_name!: string;
    item_inspected!: string;
    notes?: notes7;
    id!: number;
    jobsite_id!: number;
    created_at!: Date;
    updated_at?: updated_at;

    [key: string]: any;

    constructor(data?: IInspectionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item_inspected = _data["item_inspected"];
            this.notes = _data["notes"];
            this.id = _data["id"];
            this.jobsite_id = _data["jobsite_id"];
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): InspectionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item_inspected"] = this.item_inspected;
        data["notes"] = this.notes;
        data["id"] = this.id;
        data["jobsite_id"] = this.jobsite_id;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface IInspectionResponse {
    company_name: string;
    item_inspected: string;
    notes?: notes7;
    id: number;
    jobsite_id: number;
    created_at: Date;
    updated_at?: updated_at;

    [key: string]: any;
}

export class InspectionUpdate implements IInspectionUpdate {
    company_name!: string;
    item_inspected!: string;
    notes?: notes8;

    [key: string]: any;

    constructor(data?: IInspectionUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.item_inspected = _data["item_inspected"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): InspectionUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["item_inspected"] = this.item_inspected;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IInspectionUpdate {
    company_name: string;
    item_inspected: string;
    notes?: notes8;

    [key: string]: any;
}

export class JobsiteCreate implements IJobsiteCreate {
    name!: string;
    address!: string;
    status!: JobsiteStatus;
    company_id!: number;
    latitude?: Latitude;
    longitude?: Longitude;

    [key: string]: any;

    constructor(data?: IJobsiteCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.address = _data["address"];
            this.status = _data["status"];
            this.company_id = _data["company_id"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): JobsiteCreate {
        data = typeof data === 'object' ? data : {};
        let result = new JobsiteCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["address"] = this.address;
        data["status"] = this.status;
        data["company_id"] = this.company_id;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface IJobsiteCreate {
    name: string;
    address: string;
    status: JobsiteStatus;
    company_id: number;
    latitude?: Latitude;
    longitude?: Longitude;

    [key: string]: any;
}

/** Response model for verify-qr-code that includes jobsite_id */
export class JobsiteQRCodeResponse implements IJobsiteQRCodeResponse {
    created_at!: Date;
    updated_at!: Date;
    name!: string;
    address!: string;
    status!: JobsiteStatus;
    company_id!: number;
    latitude?: latitude;
    longitude?: longitude;
    id!: number;
    qr_code_id!: string;
    /** Alias for id field */
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: IJobsiteQRCodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"] ? new Date(_data["updated_at"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.address = _data["address"];
            this.status = _data["status"];
            this.company_id = _data["company_id"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.id = _data["id"];
            this.qr_code_id = _data["qr_code_id"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): JobsiteQRCodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JobsiteQRCodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at ? this.updated_at.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["address"] = this.address;
        data["status"] = this.status;
        data["company_id"] = this.company_id;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["id"] = this.id;
        data["qr_code_id"] = this.qr_code_id;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

/** Response model for verify-qr-code that includes jobsite_id */
export interface IJobsiteQRCodeResponse {
    created_at: Date;
    updated_at: Date;
    name: string;
    address: string;
    status: JobsiteStatus;
    company_id: number;
    latitude?: latitude;
    longitude?: longitude;
    id: number;
    qr_code_id: string;
    /** Alias for id field */
    jobsite_id: number;

    [key: string]: any;
}

export class JobsiteResponse implements IJobsiteResponse {
    created_at!: Date;
    updated_at!: Date;
    name!: string;
    address!: string;
    status!: JobsiteStatus;
    company_id!: number;
    latitude?: latitude2;
    longitude?: longitude2;
    id!: number;
    qr_code_id!: string;

    [key: string]: any;

    constructor(data?: IJobsiteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"] ? new Date(_data["updated_at"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.address = _data["address"];
            this.status = _data["status"];
            this.company_id = _data["company_id"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.id = _data["id"];
            this.qr_code_id = _data["qr_code_id"];
        }
    }

    static fromJS(data: any): JobsiteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JobsiteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at ? this.updated_at.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["address"] = this.address;
        data["status"] = this.status;
        data["company_id"] = this.company_id;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["id"] = this.id;
        data["qr_code_id"] = this.qr_code_id;
        return data;
    }
}

export interface IJobsiteResponse {
    created_at: Date;
    updated_at: Date;
    name: string;
    address: string;
    status: JobsiteStatus;
    company_id: number;
    latitude?: latitude2;
    longitude?: longitude2;
    id: number;
    qr_code_id: string;

    [key: string]: any;
}

export enum JobsiteStatus {
    Active = "active",
    Inactive = "inactive",
    Completed = "completed",
}

export class JobsiteUpdate implements IJobsiteUpdate {
    name?: name;
    address?: address3;
    status?: Status;
    latitude?: latitude3;
    longitude?: longitude3;

    [key: string]: any;

    constructor(data?: IJobsiteUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.address = _data["address"];
            this.status = _data["status"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): JobsiteUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new JobsiteUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["address"] = this.address;
        data["status"] = this.status;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface IJobsiteUpdate {
    name?: name;
    address?: address3;
    status?: Status;
    latitude?: latitude3;
    longitude?: longitude3;

    [key: string]: any;
}

/** Response model for jobsite weather endpoint */
export class JobsiteWeatherResponse implements IJobsiteWeatherResponse {
    jobsite_id!: number;
    jobsite_name!: string;
    address!: string;
    forecast!: WeatherForecast;

    [key: string]: any;

    constructor(data?: IJobsiteWeatherResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forecast = new WeatherForecast();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.jobsite_id = _data["jobsite_id"];
            this.jobsite_name = _data["jobsite_name"];
            this.address = _data["address"];
            this.forecast = _data["forecast"] ? WeatherForecast.fromJS(_data["forecast"]) : new WeatherForecast();
        }
    }

    static fromJS(data: any): JobsiteWeatherResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JobsiteWeatherResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["jobsite_id"] = this.jobsite_id;
        data["jobsite_name"] = this.jobsite_name;
        data["address"] = this.address;
        data["forecast"] = this.forecast ? this.forecast.toJSON() : <any>undefined;
        return data;
    }
}

/** Response model for jobsite weather endpoint */
export interface IJobsiteWeatherResponse {
    jobsite_id: number;
    jobsite_name: string;
    address: string;
    forecast: WeatherForecast;

    [key: string]: any;
}

export class PaginatedDiaryEntryResponse implements IPaginatedDiaryEntryResponse {
    items!: DiaryEntryResponse[];
    total!: number;
    page!: number;
    per_page!: number;
    total_pages!: number;
    has_next!: boolean;
    has_prev!: boolean;

    [key: string]: any;

    constructor(data?: IPaginatedDiaryEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DiaryEntryResponse.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.per_page = _data["per_page"];
            this.total_pages = _data["total_pages"];
            this.has_next = _data["has_next"];
            this.has_prev = _data["has_prev"];
        }
    }

    static fromJS(data: any): PaginatedDiaryEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedDiaryEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["per_page"] = this.per_page;
        data["total_pages"] = this.total_pages;
        data["has_next"] = this.has_next;
        data["has_prev"] = this.has_prev;
        return data;
    }
}

export interface IPaginatedDiaryEntryResponse {
    items: DiaryEntryResponse[];
    total: number;
    page: number;
    per_page: number;
    total_pages: number;
    has_next: boolean;
    has_prev: boolean;

    [key: string]: any;
}

export class PhotoResponse implements IPhotoResponse {
    created_at!: Date;
    updated_at!: Date;
    record_type!: PhotoResponseRecord_type;
    record_id!: number;
    description?: description;
    id!: number;
    filename!: string;
    original_filename!: string;
    file_size!: number;
    mime_type!: string;
    url!: string;
    created_by_user_id!: number;

    [key: string]: any;

    constructor(data?: IPhotoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"] ? new Date(_data["updated_at"].toString()) : <any>undefined;
            this.record_type = _data["record_type"];
            this.record_id = _data["record_id"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.filename = _data["filename"];
            this.original_filename = _data["original_filename"];
            this.file_size = _data["file_size"];
            this.mime_type = _data["mime_type"];
            this.url = _data["url"];
            this.created_by_user_id = _data["created_by_user_id"];
        }
    }

    static fromJS(data: any): PhotoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at ? this.updated_at.toISOString() : <any>undefined;
        data["record_type"] = this.record_type;
        data["record_id"] = this.record_id;
        data["description"] = this.description;
        data["id"] = this.id;
        data["filename"] = this.filename;
        data["original_filename"] = this.original_filename;
        data["file_size"] = this.file_size;
        data["mime_type"] = this.mime_type;
        data["url"] = this.url;
        data["created_by_user_id"] = this.created_by_user_id;
        return data;
    }
}

export interface IPhotoResponse {
    created_at: Date;
    updated_at: Date;
    record_type: PhotoResponseRecord_type;
    record_id: number;
    description?: description;
    id: number;
    filename: string;
    original_filename: string;
    file_size: number;
    mime_type: string;
    url: string;
    created_by_user_id: number;

    [key: string]: any;
}

/** Response model for QR code creation operations */
export class QRCodeResponse implements IQRCodeResponse {
    token!: string;
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: IQRCodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.token = _data["token"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): QRCodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new QRCodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["token"] = this.token;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

/** Response model for QR code creation operations */
export interface IQRCodeResponse {
    token: string;
    jobsite_id: number;

    [key: string]: any;
}

/** Request model for verifying a QR code */
export class QRCodeVerifyRequest implements IQRCodeVerifyRequest {
    token!: string;

    [key: string]: any;

    constructor(data?: IQRCodeVerifyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): QRCodeVerifyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new QRCodeVerifyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["token"] = this.token;
        return data;
    }
}

/** Request model for verifying a QR code */
export interface IQRCodeVerifyRequest {
    token: string;

    [key: string]: any;
}

export class RoleListResponse implements IRoleListResponse {
    roles!: string[];

    [key: string]: any;

    constructor(data?: IRoleListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IRoleListResponse {
    roles: string[];

    [key: string]: any;
}

export class SubcontractorCreate implements ISubcontractorCreate {
    company_name!: string;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men!: number;
    start_time!: string;
    finish_time!: string;
    notes?: notes9;
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: ISubcontractorCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.qty_of_men = _data["qty_of_men"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): SubcontractorCreate {
        data = typeof data === 'object' ? data : {};
        let result = new SubcontractorCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["qty_of_men"] = this.qty_of_men;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

export interface ISubcontractorCreate {
    company_name: string;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men: number;
    start_time: string;
    finish_time: string;
    notes?: notes9;
    jobsite_id: number;

    [key: string]: any;
}

export class SubcontractorResponse implements ISubcontractorResponse {
    company_name!: string;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men!: number;
    start_time!: string;
    finish_time!: string;
    notes?: notes10;
    id!: number;
    jobsite_id!: number;
    created_at!: Date;
    updated_at?: updated_at2;

    [key: string]: any;

    constructor(data?: ISubcontractorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.qty_of_men = _data["qty_of_men"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
            this.id = _data["id"];
            this.jobsite_id = _data["jobsite_id"];
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): SubcontractorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SubcontractorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["qty_of_men"] = this.qty_of_men;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        data["id"] = this.id;
        data["jobsite_id"] = this.jobsite_id;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface ISubcontractorResponse {
    company_name: string;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men: number;
    start_time: string;
    finish_time: string;
    notes?: notes10;
    id: number;
    jobsite_id: number;
    created_at: Date;
    updated_at?: updated_at2;

    [key: string]: any;
}

export class SubcontractorUpdate implements ISubcontractorUpdate {
    company_name?: company_name;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men?: Qty_of_men;
    start_time?: Start_time;
    finish_time?: Finish_time;
    notes?: notes11;

    [key: string]: any;

    constructor(data?: ISubcontractorUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.company_name = _data["company_name"];
            this.qty_of_men = _data["qty_of_men"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): SubcontractorUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new SubcontractorUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["company_name"] = this.company_name;
        data["qty_of_men"] = this.qty_of_men;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ISubcontractorUpdate {
    company_name?: company_name;
    /** Number of workers on site, must be greater than 0 */
    qty_of_men?: Qty_of_men;
    start_time?: Start_time;
    finish_time?: Finish_time;
    notes?: notes11;

    [key: string]: any;
}

export class Token implements IToken {
    access_token!: string;
    token_type!: string;

    [key: string]: any;

    constructor(data?: IToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.access_token = _data["access_token"];
            this.token_type = _data["token_type"];
        }
    }

    static fromJS(data: any): Token {
        data = typeof data === 'object' ? data : {};
        let result = new Token();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["access_token"] = this.access_token;
        data["token_type"] = this.token_type;
        return data;
    }
}

export interface IToken {
    access_token: string;
    token_type: string;

    [key: string]: any;
}

export class UserCompanyRoleResponse implements IUserCompanyRoleResponse {
    role!: string;

    [key: string]: any;

    constructor(data?: IUserCompanyRoleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UserCompanyRoleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserCompanyRoleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["role"] = this.role;
        return data;
    }
}

export interface IUserCompanyRoleResponse {
    role: string;

    [key: string]: any;
}

export class UserCreate implements IUserCreate {
    email!: string;
    name!: string;
    role?: Role;
    company_id?: Company_id;

    [key: string]: any;

    constructor(data?: IUserCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.email = _data["email"];
            this.name = _data["name"];
            this.role = _data["role"];
            this.company_id = _data["company_id"];
        }
    }

    static fromJS(data: any): UserCreate {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["email"] = this.email;
        data["name"] = this.name;
        data["role"] = this.role;
        data["company_id"] = this.company_id;
        return data;
    }
}

export interface IUserCreate {
    email: string;
    name: string;
    role?: Role;
    company_id?: Company_id;

    [key: string]: any;
}

export class UserResponse implements IUserResponse {
    id!: number;
    email!: string;
    name!: string;
    role?: role;
    current_company_id?: Current_company_id;

    [key: string]: any;

    constructor(data?: IUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.role = _data["role"];
            this.current_company_id = _data["current_company_id"];
        }
    }

    static fromJS(data: any): UserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["email"] = this.email;
        data["name"] = this.name;
        data["role"] = this.role;
        data["current_company_id"] = this.current_company_id;
        return data;
    }
}

export interface IUserResponse {
    id: number;
    email: string;
    name: string;
    role?: role;
    current_company_id?: Current_company_id;

    [key: string]: any;
}

export enum UserRole {
    System_admin = "System_admin",
    Company_Owner = "Company_Owner",
    Company_Admin = "Company_Admin",
    Site_supervisor = "Site_supervisor",
    Project_manager = "Project_manager",
    Employee = "Employee",
}

export class UserRolesResponse implements IUserRolesResponse {
    roles!: CompanyRole[];

    [key: string]: any;

    constructor(data?: IUserRolesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(CompanyRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRolesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserRolesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserRolesResponse {
    roles: CompanyRole[];

    [key: string]: any;
}

export class UserUpdate implements IUserUpdate {
    name?: name2;
    role?: role2;
    current_company_id?: current_company_id;

    [key: string]: any;

    constructor(data?: IUserUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.role = _data["role"];
            this.current_company_id = _data["current_company_id"];
        }
    }

    static fromJS(data: any): UserUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["role"] = this.role;
        data["current_company_id"] = this.current_company_id;
        return data;
    }
}

export interface IUserUpdate {
    name?: name2;
    role?: role2;
    current_company_id?: current_company_id;

    [key: string]: any;
}

export class ValidationError implements IValidationError {
    loc!: Loc[];
    msg!: string;
    type!: string;

    [key: string]: any;

    constructor(data?: IValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.loc = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["loc"])) {
                this.loc = [] as any;
                for (let item of _data["loc"])
                    this.loc!.push(item);
            }
            this.msg = _data["msg"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.loc)) {
            data["loc"] = [];
            for (let item of this.loc)
                data["loc"].push(item);
        }
        data["msg"] = this.msg;
        data["type"] = this.type;
        return data;
    }
}

export interface IValidationError {
    loc: Loc[];
    msg: string;
    type: string;

    [key: string]: any;
}

export class VisitorCreate implements IVisitorCreate {
    name!: string;
    company_name!: string;
    start_time!: string;
    finish_time?: finish_time;
    notes?: notes12;
    jobsite_id!: number;

    [key: string]: any;

    constructor(data?: IVisitorCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.company_name = _data["company_name"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
            this.jobsite_id = _data["jobsite_id"];
        }
    }

    static fromJS(data: any): VisitorCreate {
        data = typeof data === 'object' ? data : {};
        let result = new VisitorCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["company_name"] = this.company_name;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        data["jobsite_id"] = this.jobsite_id;
        return data;
    }
}

export interface IVisitorCreate {
    name: string;
    company_name: string;
    start_time: string;
    finish_time?: finish_time;
    notes?: notes12;
    jobsite_id: number;

    [key: string]: any;
}

export class VisitorResponse implements IVisitorResponse {
    name!: string;
    company_name!: string;
    start_time!: string;
    finish_time?: finish_time2;
    notes?: notes13;
    id!: number;
    jobsite_id!: number;
    created_at!: Date;
    updated_at?: updated_at3;

    [key: string]: any;

    constructor(data?: IVisitorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.company_name = _data["company_name"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
            this.id = _data["id"];
            this.jobsite_id = _data["jobsite_id"];
            this.created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            this.updated_at = _data["updated_at"];
        }
    }

    static fromJS(data: any): VisitorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VisitorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["company_name"] = this.company_name;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        data["id"] = this.id;
        data["jobsite_id"] = this.jobsite_id;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["updated_at"] = this.updated_at;
        return data;
    }
}

export interface IVisitorResponse {
    name: string;
    company_name: string;
    start_time: string;
    finish_time?: finish_time2;
    notes?: notes13;
    id: number;
    jobsite_id: number;
    created_at: Date;
    updated_at?: updated_at3;

    [key: string]: any;
}

export class VisitorUpdate implements IVisitorUpdate {
    name?: name3;
    company_name?: company_name2;
    start_time?: start_time;
    finish_time?: finish_time3;
    notes?: notes14;

    [key: string]: any;

    constructor(data?: IVisitorUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.company_name = _data["company_name"];
            this.start_time = _data["start_time"];
            this.finish_time = _data["finish_time"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): VisitorUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new VisitorUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["company_name"] = this.company_name;
        data["start_time"] = this.start_time;
        data["finish_time"] = this.finish_time;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IVisitorUpdate {
    name?: name3;
    company_name?: company_name2;
    start_time?: start_time;
    finish_time?: finish_time3;
    notes?: notes14;

    [key: string]: any;
}

/** Complete weather forecast */
export class WeatherForecast implements IWeatherForecast {
    latitude!: number;
    longitude!: number;
    elevation?: Elevation;
    timezone!: string;
    current!: CurrentWeather;
    hourly!: HourlyWeather;
    daily!: DailyWeather;

    [key: string]: any;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.current = new CurrentWeather();
            this.hourly = new HourlyWeather();
            this.daily = new DailyWeather();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.elevation = _data["elevation"];
            this.timezone = _data["timezone"];
            this.current = _data["current"] ? CurrentWeather.fromJS(_data["current"]) : new CurrentWeather();
            this.hourly = _data["hourly"] ? HourlyWeather.fromJS(_data["hourly"]) : new HourlyWeather();
            this.daily = _data["daily"] ? DailyWeather.fromJS(_data["daily"]) : new DailyWeather();
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["elevation"] = this.elevation;
        data["timezone"] = this.timezone;
        data["current"] = this.current ? this.current.toJSON() : <any>undefined;
        data["hourly"] = this.hourly ? this.hourly.toJSON() : <any>undefined;
        data["daily"] = this.daily ? this.daily.toJSON() : <any>undefined;
        return data;
    }
}

/** Complete weather forecast */
export interface IWeatherForecast {
    latitude: number;
    longitude: number;
    elevation?: Elevation;
    timezone: string;
    current: CurrentWeather;
    hourly: HourlyWeather;
    daily: DailyWeather;

    [key: string]: any;
}

export class WeatherInfo implements IWeatherInfo {
    temperature!: number;
    conditions!: string;
    wind_speed?: Wind_speed;
    humidity?: Humidity;

    [key: string]: any;

    constructor(data?: IWeatherInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.temperature = _data["temperature"];
            this.conditions = _data["conditions"];
            this.wind_speed = _data["wind_speed"];
            this.humidity = _data["humidity"];
        }
    }

    static fromJS(data: any): WeatherInfo {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["temperature"] = this.temperature;
        data["conditions"] = this.conditions;
        data["wind_speed"] = this.wind_speed;
        data["humidity"] = this.humidity;
        return data;
    }
}

export interface IWeatherInfo {
    temperature: number;
    conditions: string;
    wind_speed?: Wind_speed;
    humidity?: Humidity;

    [key: string]: any;
}

/** Search term for work_completed, notes, or safety_issues */
export class Search implements ISearch {

    [key: string]: any;

    constructor(data?: ISearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Search {
        data = typeof data === 'object' ? data : {};
        let result = new Search();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Search term for work_completed, notes, or safety_issues */
export interface ISearch {

    [key: string]: any;
}

/** Filter entries from this date */
export class Start_date implements IStart_date {

    [key: string]: any;

    constructor(data?: IStart_date) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Start_date {
        data = typeof data === 'object' ? data : {};
        let result = new Start_date();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries from this date */
export interface IStart_date {

    [key: string]: any;
}

/** Filter entries until this date */
export class End_date implements IEnd_date {

    [key: string]: any;

    constructor(data?: IEnd_date) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): End_date {
        data = typeof data === 'object' ? data : {};
        let result = new End_date();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries until this date */
export interface IEnd_date {

    [key: string]: any;
}

/** Filter by weather condition */
export class Weather_condition implements IWeather_condition {

    [key: string]: any;

    constructor(data?: IWeather_condition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Weather_condition {
        data = typeof data === 'object' ? data : {};
        let result = new Weather_condition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter by weather condition */
export interface IWeather_condition {

    [key: string]: any;
}

/** Filter entries with/without delays */
export class Has_delays implements IHas_delays {

    [key: string]: any;

    constructor(data?: IHas_delays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Has_delays {
        data = typeof data === 'object' ? data : {};
        let result = new Has_delays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries with/without delays */
export interface IHas_delays {

    [key: string]: any;
}

/** Filter entries with/without safety issues */
export class Has_safety_issues implements IHas_safety_issues {

    [key: string]: any;

    constructor(data?: IHas_safety_issues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Has_safety_issues {
        data = typeof data === 'object' ? data : {};
        let result = new Has_safety_issues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries with/without safety issues */
export interface IHas_safety_issues {

    [key: string]: any;
}

/** Filter entries from this date */
export class Start_date2 implements IStart_date2 {

    [key: string]: any;

    constructor(data?: IStart_date2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Start_date2 {
        data = typeof data === 'object' ? data : {};
        let result = new Start_date2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries from this date */
export interface IStart_date2 {

    [key: string]: any;
}

/** Filter entries until this date */
export class End_date2 implements IEnd_date2 {

    [key: string]: any;

    constructor(data?: IEnd_date2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): End_date2 {
        data = typeof data === 'object' ? data : {};
        let result = new End_date2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** Filter entries until this date */
export interface IEnd_date2 {

    [key: string]: any;
}

export enum Record_type {
    Diary = "diary",
    Inspection = "inspection",
    Safety = "safety",
}

export class Description implements IDescription {

    [key: string]: any;

    constructor(data?: IDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Description {
        data = typeof data === 'object' ? data : {};
        let result = new Description();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IDescription {

    [key: string]: any;
}

export enum Record_type2 {
    Diary = "diary",
    Inspection = "inspection",
    Safety = "safety",
}

export class User_role implements IUser_role {

    [key: string]: any;

    constructor(data?: IUser_role) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): User_role {
        data = typeof data === 'object' ? data : {};
        let result = new User_role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IUser_role {

    [key: string]: any;
}

export class Grant_type implements IGrant_type {

    [key: string]: any;

    constructor(data?: IGrant_type) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Grant_type {
        data = typeof data === 'object' ? data : {};
        let result = new Grant_type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IGrant_type {

    [key: string]: any;
}

export class Client_id implements IClient_id {

    [key: string]: any;

    constructor(data?: IClient_id) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Client_id {
        data = typeof data === 'object' ? data : {};
        let result = new Client_id();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IClient_id {

    [key: string]: any;
}

export class Client_secret implements IClient_secret {

    [key: string]: any;

    constructor(data?: IClient_secret) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Client_secret {
        data = typeof data === 'object' ? data : {};
        let result = new Client_secret();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IClient_secret {

    [key: string]: any;
}

export class Contact_info implements IContact_info {

    [key: string]: any;

    constructor(data?: IContact_info) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Contact_info {
        data = typeof data === 'object' ? data : {};
        let result = new Contact_info();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IContact_info {

    [key: string]: any;
}

export class Company implements ICompany {

    [key: string]: any;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Company {
        data = typeof data === 'object' ? data : {};
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ICompany {

    [key: string]: any;
}

export enum CheckInRequestType {
    Visitor = "visitor",
    Contractor = "contractor",
}

export class Inducted implements IInducted {

    [key: string]: any;

    constructor(data?: IInducted) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Inducted {
        data = typeof data === 'object' ? data : {};
        let result = new Inducted();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IInducted {

    [key: string]: any;
}

export class Address implements IAddress {

    [key: string]: any;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAddress {

    [key: string]: any;
}

export class Contact_number implements IContact_number {

    [key: string]: any;

    constructor(data?: IContact_number) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Contact_number {
        data = typeof data === 'object' ? data : {};
        let result = new Contact_number();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IContact_number {

    [key: string]: any;
}

export class address implements Iaddress {

    [key: string]: any;

    constructor(data?: Iaddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): address {
        data = typeof data === 'object' ? data : {};
        let result = new address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iaddress {

    [key: string]: any;
}

export class contact_number implements Icontact_number {

    [key: string]: any;

    constructor(data?: Icontact_number) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): contact_number {
        data = typeof data === 'object' ? data : {};
        let result = new contact_number();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icontact_number {

    [key: string]: any;
}

export class Name implements IName {

    [key: string]: any;

    constructor(data?: IName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Name {
        data = typeof data === 'object' ? data : {};
        let result = new Name();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IName {

    [key: string]: any;
}

export class address2 implements Iaddress2 {

    [key: string]: any;

    constructor(data?: Iaddress2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): address2 {
        data = typeof data === 'object' ? data : {};
        let result = new address2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iaddress2 {

    [key: string]: any;
}

export class contact_number2 implements Icontact_number2 {

    [key: string]: any;

    constructor(data?: Icontact_number2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): contact_number2 {
        data = typeof data === 'object' ? data : {};
        let result = new contact_number2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icontact_number2 {

    [key: string]: any;
}

export class Relative_humidity_2m implements IRelative_humidity_2m {

    [key: string]: any;

    constructor(data?: IRelative_humidity_2m) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Relative_humidity_2m {
        data = typeof data === 'object' ? data : {};
        let result = new Relative_humidity_2m();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IRelative_humidity_2m {

    [key: string]: any;
}

export class Notes implements INotes {

    [key: string]: any;

    constructor(data?: INotes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Notes {
        data = typeof data === 'object' ? data : {};
        let result = new Notes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface INotes {

    [key: string]: any;
}

export class notes implements Inotes {

    [key: string]: any;

    constructor(data?: Inotes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes {
        data = typeof data === 'object' ? data : {};
        let result = new notes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes {

    [key: string]: any;
}

export class Updated_at implements IUpdated_at {

    [key: string]: any;

    constructor(data?: IUpdated_at) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Updated_at {
        data = typeof data === 'object' ? data : {};
        let result = new Updated_at();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IUpdated_at {

    [key: string]: any;
}

export class Company_name implements ICompany_name {

    [key: string]: any;

    constructor(data?: ICompany_name) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Company_name {
        data = typeof data === 'object' ? data : {};
        let result = new Company_name();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ICompany_name {

    [key: string]: any;
}

export class Item implements IItem {

    [key: string]: any;

    constructor(data?: IItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Item {
        data = typeof data === 'object' ? data : {};
        let result = new Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IItem {

    [key: string]: any;
}

export class Qty implements IQty {

    [key: string]: any;

    constructor(data?: IQty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Qty {
        data = typeof data === 'object' ? data : {};
        let result = new Qty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IQty {

    [key: string]: any;
}

export class notes2 implements Inotes2 {

    [key: string]: any;

    constructor(data?: Inotes2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes2 {
        data = typeof data === 'object' ? data : {};
        let result = new notes2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes2 {

    [key: string]: any;
}

export class Weather implements IWeather {

    [key: string]: any;

    constructor(data?: IWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Weather {
        data = typeof data === 'object' ? data : {};
        let result = new Weather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IWeather {

    [key: string]: any;
}

export class Delays implements IDelays {

    [key: string]: any;

    constructor(data?: IDelays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Delays {
        data = typeof data === 'object' ? data : {};
        let result = new Delays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IDelays {

    [key: string]: any;
}

export class notes3 implements Inotes3 {

    [key: string]: any;

    constructor(data?: Inotes3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes3 {
        data = typeof data === 'object' ? data : {};
        let result = new notes3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes3 {

    [key: string]: any;
}

export class Safety_issues implements ISafety_issues {

    [key: string]: any;

    constructor(data?: ISafety_issues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Safety_issues {
        data = typeof data === 'object' ? data : {};
        let result = new Safety_issues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ISafety_issues {

    [key: string]: any;
}

export class weather implements Iweather {

    [key: string]: any;

    constructor(data?: Iweather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): weather {
        data = typeof data === 'object' ? data : {};
        let result = new weather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iweather {

    [key: string]: any;
}

export class delays implements Idelays {

    [key: string]: any;

    constructor(data?: Idelays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): delays {
        data = typeof data === 'object' ? data : {};
        let result = new delays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Idelays {

    [key: string]: any;
}

export class notes4 implements Inotes4 {

    [key: string]: any;

    constructor(data?: Inotes4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes4 {
        data = typeof data === 'object' ? data : {};
        let result = new notes4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes4 {

    [key: string]: any;
}

export class safety_issues implements Isafety_issues {

    [key: string]: any;

    constructor(data?: Isafety_issues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): safety_issues {
        data = typeof data === 'object' ? data : {};
        let result = new safety_issues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Isafety_issues {

    [key: string]: any;
}

export class weather2 implements Iweather2 {

    [key: string]: any;

    constructor(data?: Iweather2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): weather2 {
        data = typeof data === 'object' ? data : {};
        let result = new weather2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iweather2 {

    [key: string]: any;
}

export class Work_completed implements IWork_completed {

    [key: string]: any;

    constructor(data?: IWork_completed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Work_completed {
        data = typeof data === 'object' ? data : {};
        let result = new Work_completed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IWork_completed {

    [key: string]: any;
}

export class delays2 implements Idelays2 {

    [key: string]: any;

    constructor(data?: Idelays2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): delays2 {
        data = typeof data === 'object' ? data : {};
        let result = new delays2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Idelays2 {

    [key: string]: any;
}

export class notes5 implements Inotes5 {

    [key: string]: any;

    constructor(data?: Inotes5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes5 {
        data = typeof data === 'object' ? data : {};
        let result = new notes5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes5 {

    [key: string]: any;
}

export class safety_issues2 implements Isafety_issues2 {

    [key: string]: any;

    constructor(data?: Isafety_issues2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): safety_issues2 {
        data = typeof data === 'object' ? data : {};
        let result = new safety_issues2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Isafety_issues2 {

    [key: string]: any;
}

export class Off_hire implements IOff_hire {

    [key: string]: any;

    constructor(data?: IOff_hire) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Off_hire {
        data = typeof data === 'object' ? data : {};
        let result = new Off_hire();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IOff_hire {

    [key: string]: any;
}

export class off_hire implements Ioff_hire {

    [key: string]: any;

    constructor(data?: Ioff_hire) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): off_hire {
        data = typeof data === 'object' ? data : {};
        let result = new off_hire();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ioff_hire {

    [key: string]: any;
}

export class item implements Iitem {

    [key: string]: any;

    constructor(data?: Iitem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): item {
        data = typeof data === 'object' ? data : {};
        let result = new item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iitem {

    [key: string]: any;
}

export class On_hire implements IOn_hire {

    [key: string]: any;

    constructor(data?: IOn_hire) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): On_hire {
        data = typeof data === 'object' ? data : {};
        let result = new On_hire();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IOn_hire {

    [key: string]: any;
}

export class off_hire2 implements Ioff_hire2 {

    [key: string]: any;

    constructor(data?: Ioff_hire2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): off_hire2 {
        data = typeof data === 'object' ? data : {};
        let result = new off_hire2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ioff_hire2 {

    [key: string]: any;
}

export class notes6 implements Inotes6 {

    [key: string]: any;

    constructor(data?: Inotes6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes6 {
        data = typeof data === 'object' ? data : {};
        let result = new notes6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes6 {

    [key: string]: any;
}

export class notes7 implements Inotes7 {

    [key: string]: any;

    constructor(data?: Inotes7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes7 {
        data = typeof data === 'object' ? data : {};
        let result = new notes7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes7 {

    [key: string]: any;
}

export class updated_at implements Iupdated_at {

    [key: string]: any;

    constructor(data?: Iupdated_at) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): updated_at {
        data = typeof data === 'object' ? data : {};
        let result = new updated_at();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iupdated_at {

    [key: string]: any;
}

export class notes8 implements Inotes8 {

    [key: string]: any;

    constructor(data?: Inotes8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes8 {
        data = typeof data === 'object' ? data : {};
        let result = new notes8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes8 {

    [key: string]: any;
}

export class Latitude implements ILatitude {

    [key: string]: any;

    constructor(data?: ILatitude) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Latitude {
        data = typeof data === 'object' ? data : {};
        let result = new Latitude();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ILatitude {

    [key: string]: any;
}

export class Longitude implements ILongitude {

    [key: string]: any;

    constructor(data?: ILongitude) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Longitude {
        data = typeof data === 'object' ? data : {};
        let result = new Longitude();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ILongitude {

    [key: string]: any;
}

export class latitude implements Ilatitude {

    [key: string]: any;

    constructor(data?: Ilatitude) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): latitude {
        data = typeof data === 'object' ? data : {};
        let result = new latitude();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilatitude {

    [key: string]: any;
}

export class longitude implements Ilongitude {

    [key: string]: any;

    constructor(data?: Ilongitude) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): longitude {
        data = typeof data === 'object' ? data : {};
        let result = new longitude();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilongitude {

    [key: string]: any;
}

export class latitude2 implements Ilatitude2 {

    [key: string]: any;

    constructor(data?: Ilatitude2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): latitude2 {
        data = typeof data === 'object' ? data : {};
        let result = new latitude2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilatitude2 {

    [key: string]: any;
}

export class longitude2 implements Ilongitude2 {

    [key: string]: any;

    constructor(data?: Ilongitude2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): longitude2 {
        data = typeof data === 'object' ? data : {};
        let result = new longitude2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilongitude2 {

    [key: string]: any;
}

export class name implements Iname {

    [key: string]: any;

    constructor(data?: Iname) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): name {
        data = typeof data === 'object' ? data : {};
        let result = new name();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iname {

    [key: string]: any;
}

export class address3 implements Iaddress3 {

    [key: string]: any;

    constructor(data?: Iaddress3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): address3 {
        data = typeof data === 'object' ? data : {};
        let result = new address3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iaddress3 {

    [key: string]: any;
}

export class Status implements IStatus {

    [key: string]: any;

    constructor(data?: IStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IStatus {

    [key: string]: any;
}

export class latitude3 implements Ilatitude3 {

    [key: string]: any;

    constructor(data?: Ilatitude3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): latitude3 {
        data = typeof data === 'object' ? data : {};
        let result = new latitude3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilatitude3 {

    [key: string]: any;
}

export class longitude3 implements Ilongitude3 {

    [key: string]: any;

    constructor(data?: Ilongitude3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): longitude3 {
        data = typeof data === 'object' ? data : {};
        let result = new longitude3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ilongitude3 {

    [key: string]: any;
}

export enum PhotoResponseRecord_type {
    Diary = "diary",
    Inspection = "inspection",
    Safety = "safety",
}

export class description implements Idescription {

    [key: string]: any;

    constructor(data?: Idescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): description {
        data = typeof data === 'object' ? data : {};
        let result = new description();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Idescription {

    [key: string]: any;
}

export class notes9 implements Inotes9 {

    [key: string]: any;

    constructor(data?: Inotes9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes9 {
        data = typeof data === 'object' ? data : {};
        let result = new notes9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes9 {

    [key: string]: any;
}

export class notes10 implements Inotes10 {

    [key: string]: any;

    constructor(data?: Inotes10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes10 {
        data = typeof data === 'object' ? data : {};
        let result = new notes10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes10 {

    [key: string]: any;
}

export class updated_at2 implements Iupdated_at2 {

    [key: string]: any;

    constructor(data?: Iupdated_at2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): updated_at2 {
        data = typeof data === 'object' ? data : {};
        let result = new updated_at2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iupdated_at2 {

    [key: string]: any;
}

export class company_name implements Icompany_name {

    [key: string]: any;

    constructor(data?: Icompany_name) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): company_name {
        data = typeof data === 'object' ? data : {};
        let result = new company_name();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icompany_name {

    [key: string]: any;
}

export class Qty_of_men implements IQty_of_men {

    [key: string]: any;

    constructor(data?: IQty_of_men) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Qty_of_men {
        data = typeof data === 'object' ? data : {};
        let result = new Qty_of_men();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IQty_of_men {

    [key: string]: any;
}

export class Start_time implements IStart_time {

    [key: string]: any;

    constructor(data?: IStart_time) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Start_time {
        data = typeof data === 'object' ? data : {};
        let result = new Start_time();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IStart_time {

    [key: string]: any;
}

export class Finish_time implements IFinish_time {

    [key: string]: any;

    constructor(data?: IFinish_time) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Finish_time {
        data = typeof data === 'object' ? data : {};
        let result = new Finish_time();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IFinish_time {

    [key: string]: any;
}

export class notes11 implements Inotes11 {

    [key: string]: any;

    constructor(data?: Inotes11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes11 {
        data = typeof data === 'object' ? data : {};
        let result = new notes11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes11 {

    [key: string]: any;
}

export class Role implements IRole {

    [key: string]: any;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IRole {

    [key: string]: any;
}

export class Company_id implements ICompany_id {

    [key: string]: any;

    constructor(data?: ICompany_id) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Company_id {
        data = typeof data === 'object' ? data : {};
        let result = new Company_id();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ICompany_id {

    [key: string]: any;
}

export class role implements Irole {

    [key: string]: any;

    constructor(data?: Irole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): role {
        data = typeof data === 'object' ? data : {};
        let result = new role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Irole {

    [key: string]: any;
}

export class Current_company_id implements ICurrent_company_id {

    [key: string]: any;

    constructor(data?: ICurrent_company_id) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Current_company_id {
        data = typeof data === 'object' ? data : {};
        let result = new Current_company_id();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ICurrent_company_id {

    [key: string]: any;
}

export class name2 implements Iname2 {

    [key: string]: any;

    constructor(data?: Iname2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): name2 {
        data = typeof data === 'object' ? data : {};
        let result = new name2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iname2 {

    [key: string]: any;
}

export class role2 implements Irole2 {

    [key: string]: any;

    constructor(data?: Irole2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): role2 {
        data = typeof data === 'object' ? data : {};
        let result = new role2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Irole2 {

    [key: string]: any;
}

export class current_company_id implements Icurrent_company_id {

    [key: string]: any;

    constructor(data?: Icurrent_company_id) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): current_company_id {
        data = typeof data === 'object' ? data : {};
        let result = new current_company_id();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icurrent_company_id {

    [key: string]: any;
}

export class Loc implements ILoc {

    [key: string]: any;

    constructor(data?: ILoc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Loc {
        data = typeof data === 'object' ? data : {};
        let result = new Loc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ILoc {

    [key: string]: any;
}

export class finish_time implements Ifinish_time {

    [key: string]: any;

    constructor(data?: Ifinish_time) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): finish_time {
        data = typeof data === 'object' ? data : {};
        let result = new finish_time();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ifinish_time {

    [key: string]: any;
}

export class notes12 implements Inotes12 {

    [key: string]: any;

    constructor(data?: Inotes12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes12 {
        data = typeof data === 'object' ? data : {};
        let result = new notes12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes12 {

    [key: string]: any;
}

export class finish_time2 implements Ifinish_time2 {

    [key: string]: any;

    constructor(data?: Ifinish_time2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): finish_time2 {
        data = typeof data === 'object' ? data : {};
        let result = new finish_time2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ifinish_time2 {

    [key: string]: any;
}

export class notes13 implements Inotes13 {

    [key: string]: any;

    constructor(data?: Inotes13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes13 {
        data = typeof data === 'object' ? data : {};
        let result = new notes13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes13 {

    [key: string]: any;
}

export class updated_at3 implements Iupdated_at3 {

    [key: string]: any;

    constructor(data?: Iupdated_at3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): updated_at3 {
        data = typeof data === 'object' ? data : {};
        let result = new updated_at3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iupdated_at3 {

    [key: string]: any;
}

export class name3 implements Iname3 {

    [key: string]: any;

    constructor(data?: Iname3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): name3 {
        data = typeof data === 'object' ? data : {};
        let result = new name3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iname3 {

    [key: string]: any;
}

export class company_name2 implements Icompany_name2 {

    [key: string]: any;

    constructor(data?: Icompany_name2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): company_name2 {
        data = typeof data === 'object' ? data : {};
        let result = new company_name2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icompany_name2 {

    [key: string]: any;
}

export class start_time implements Istart_time {

    [key: string]: any;

    constructor(data?: Istart_time) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): start_time {
        data = typeof data === 'object' ? data : {};
        let result = new start_time();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Istart_time {

    [key: string]: any;
}

export class finish_time3 implements Ifinish_time3 {

    [key: string]: any;

    constructor(data?: Ifinish_time3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): finish_time3 {
        data = typeof data === 'object' ? data : {};
        let result = new finish_time3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ifinish_time3 {

    [key: string]: any;
}

export class notes14 implements Inotes14 {

    [key: string]: any;

    constructor(data?: Inotes14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): notes14 {
        data = typeof data === 'object' ? data : {};
        let result = new notes14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Inotes14 {

    [key: string]: any;
}

export class Elevation implements IElevation {

    [key: string]: any;

    constructor(data?: IElevation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Elevation {
        data = typeof data === 'object' ? data : {};
        let result = new Elevation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IElevation {

    [key: string]: any;
}

export class Wind_speed implements IWind_speed {

    [key: string]: any;

    constructor(data?: IWind_speed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Wind_speed {
        data = typeof data === 'object' ? data : {};
        let result = new Wind_speed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IWind_speed {

    [key: string]: any;
}

export class Humidity implements IHumidity {

    [key: string]: any;

    constructor(data?: IHumidity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Humidity {
        data = typeof data === 'object' ? data : {};
        let result = new Humidity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IHumidity {

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

/**
 * FileParameter interface for file uploads
 * This interface is used to represent file uploads in API requests
 */
export interface FileParameter {
    data: Blob;
    fileName?: string;
}